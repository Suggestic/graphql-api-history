type AcceptUserInvite {
  success: Boolean!
  message: String!
}

type AddBiomarker {
  success: Boolean!
  message: String!
  errors: [FormError!]
  biomarker: Biomarker
}

input AddBiomarkerInput {
  name: String!
  category: ID!
  method: String
  description: String
  order: Int
  isVisible: Boolean
  range: BiomarkerRangeInput
  optimalRange: BiomarkerRangeInput
  borderlineRange: BiomarkerRangeInput
  units: [ID!]!
  aliases: [BiomarkerAliasInput!]
  normalValues: [Generic!]
}

type appCustomizationFeature {
  key: String!
  name: String!
  description: String!
}

type ArticleRecommended implements Node {
  valueMax: Float
  valueMin: Float
  createdAt: Datetime!
  updatedAt: Datetime!
  id: ID!
  article: ContentLibrary!
  biomarker: Biomarker!
  normalValues: [Generic!]
}

type ArticleRecommendedConnection {
  pageInfo: PageInfo!
  edges: [ArticleRecommendedEdge]!
}

type ArticleRecommendedEdge {
  node: ArticleRecommended
  cursor: String!
}

enum BiologicalSex {
  MALE
  FEMALE
}

type Biomarker {
  id: ID!
  name: String!
  method: String
  category: BiomarkerCategory!
  units: [BiomarkerUnit!]!
  aliases: [BiomarkerAlias!]
  description: String
  range: BiomarkerRange
  optimalRange: BiomarkerRange
  borderlineRange: BiomarkerRange
  normalValues: [Generic!]
  createdAt: Datetime!
  updatedAt: Datetime!
}

type BiomarkerAlias {
  name: String!
  language: String!
}

input BiomarkerAliasInput {
  name: String!
  language: BiomarkerLanguage!
}

type BiomarkerCategory {
  name: String!
  parent: BiomarkerCategory
  createdAt: Datetime!
  updatedAt: Datetime!
  id: ID!
}

type BiomarkerCategoryConnection {
  edges: [BiomarkerCategoryEdge!]!
  pageInfo: PageInfo!
}

type BiomarkerCategoryEdge {
  cursor: String!
  node: BiomarkerCategory
}

type BiomarkerConnection {
  edges: [BiomarkerEdge!]!
  pageInfo: PageInfo!
}

type BiomarkerEdge {
  cursor: String!
  node: Biomarker
}

input BiomarkerFilterInput {
  name: String
  categoryId: ID
}

enum BiomarkerLanguage {
  AFRIKAANS
  ALBANIAN
  ARABIC
  CATALAN
  CHINESE
  CROATIAN
  CZECH
  DANISH
  DUTCH
  ENGLISH
  ESTONIAN
  FRENCH
  GERMAN
  HEBREW
  HINDI
  INDONESIAN
  ITALIAN
  JAPANESE
  KOREAN
  POLISH
  PORTUGUESE
  ROMANIAN
  RUSSIAN
  SERBIAN
  SPANISH
  SWEDISH
  THAI
  TURKISH
  UKRAINIAN
  VIETNAMESE
  ZULU
}

type BiomarkerRange {
  max: Float
  min: Float
}

input BiomarkerRangeInput {
  max: Float!
  min: Float!
}

type BiomarkerUnit {
  id: ID!
  name: String!
  factor: Float!
  alias: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type ChangePassword {
  success: Boolean!
  message: String!
}

type Condition {
  id: ID!
  attrName: String!
  term: String
  bool: Boolean
  lte: Float
  gte: Float
  dataType: DataType
}

type ConditionConnection {
  edges: [ConditionEdge!]!
  pageInfo: PageInfo!
}

type ConditionEdge {
  cursor: String!
  node: Condition
}

type ContentCategory {
  id: ID!
  name: String!
  slug: String!
  order: Int!
  tags: [ContentTag]
  subcategories: [ContentCategory]
  image: String
  lang: Generic
}

type ContentCategoryConnection {
  edges: [ContentCategoryEdge!]!
  pageInfo: PageInfo!
}

type ContentCategoryEdge {
  cursor: String!
  node: ContentCategory
}

type ContentLibrary implements Node {
  id: ID!
  title: String!
  imageUrl: String!
  sourceUrl: String
  order: Int!
  subTitle: String
  databaseId: String
  isBlocked: Boolean
  isFavorite: Boolean
  isFeatured: Boolean
  lang: Generic
  createdAt: Datetime!
  updatedAt: Datetime!
  categories: [ContentCategory!]!
  tags: [ContentTag!]!
  programs: [Program!]
}

type ContentLibraryConnection {
  edges: [ContentLibraryEdge!]!
  pageInfo: PageInfo!
}

type ContentLibraryEdge {
  cursor: String!
  node: ContentLibrary
}

input ContentLibraryOrderBy {
  field: ContentLibraryOrderByFields
  order: SortOrder
}

enum ContentLibraryOrderByFields {
  created_at
  popularity
}

type ContentTag implements Node {
  id: ID!
  name: String!
}

type ContentTagConnection {
  edges: [ContentTagEdge!]!
  pageInfo: PageInfo!
}

type ContentTagEdge {
  cursor: String!
  node: ContentTag
}

type CopyProgram {
  success: Boolean!
  message: String!
  newProgram: Program
}

input CreateAndInviteUserInput {
  email: String!
  role: Role!
  enable2fa: Boolean!
}

type CreateArticleRecommended {
  success: Boolean!
  message: String!
  errors: [FormError!]
  articleRecommended: ArticleRecommended
}

input CreateArticleRecommendedInput {
  biomarkerId: ID!
  range: BiomarkerRangeInput
  normalValues: [Generic!]
  articleId: ID!
}

type CreateBiomarkerCategory {
  success: Boolean!
  message: String!
  errors: [FormError!]
  biomarkerCategory: BiomarkerCategory
}

input CreateBiomarkerCategoryInput {
  name: String!
  parent: ID
}

type CreateContentCategory {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentCategory: ContentCategory
}

input CreateContentCategoryInput {
  name: String!
  order: Int!
  subcategories: [ID!]
  image: Upload
  tags: [ID!]
  lang: Generic
}

type CreateContentLibrary {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentLibrary: ContentLibrary
}

input CreateContentLibraryInput {
  title: String!
  imageUrl: String!
  sourceUrl: String
  order: Int
  subTitle: String
  isBlocked: Boolean
  isFeatured: Boolean
  lang: Generic
  categories: [ID!]
  tags: [ID!]
  programs: [ID!]
}

type CreateContentTag {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentTag: ContentTag
}

type CreateCustomAttribute {
  success: Boolean!
  message: String!
  customAttribute: CustomAttribute
}

type CreateDailyRecapAnswer {
  success: Boolean!
  message: String!
  errors: [FormError!]
  dailyRecapAnswer: DailyRecapAnswer
}

input CreateDailyRecapAnswerInput {
  answer: String!
  type: String!
}

type CreateDailyRecapQuestion {
  success: Boolean!
  message: String!
  errors: [FormError!]
  dailyRecapQuestion: ThirdPartyDailyRecapQuestion
}

input CreateDailyRecapQuestionInput {
  question: String!
  imageUrl: String
  program: ID
  answers: [ID!]!
}

type CreateIngredient {
  success: Boolean!
  message: String!
}

type CreateIngredientGroup {
  success: Boolean!
  message: String!
  ingredientGroup: IngredientGroup
}

input CreateIngredientGroupInput {
  name: String!
  ingredients: [ID!]!
}

type CreateProgram {
  success: Boolean!
  message: String!
  program: Program
}

type CreateProgramGoal {
  success: Boolean!
  message: String!
  goal: Goal
}

input CreateProgramGoalInput {
  name: String!
  biologicalSex: BiologicalSex!
  programId: ID!
  nutrients: [NutrientGoalInput!]!
  minAge: Int
  maxAge: Int
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
}

input CreateProgramInput {
  name: String!
  author: String!
  isActive: Boolean
  descriptionShort: String
  descriptionLong: String
  restrictions: [ID!]
  visibility: Boolean
  energyNutrientEquation: Equation
  image: Upload
  cover: Upload
  backgroundImage: Upload
  authorAvatar: Upload
}

type CreateRuleSet {
  success: Boolean!
  message: String!
  ruleSet: RuleSet
}

input CreateRuleSetInput {
  order: Int!
  name: String!
  actionType: RuleSetActionType!
  ruleType: RuleType
  recipeTags: [ID!]
  userSegments: [ID!]
  ingredientGroups: [ID!]
  program: ID
  comment: String
  tags: [String!]
  sources: [String!]
  publicName: String
  publicComment: String
  simpleName: String
  simpleExamples: String
  priority: Int
  visibility: Boolean
}

type CreateSegmentCondition {
  success: Boolean!
  message: String!
  condition: Condition
}

input CreateSegmentConditionInput {
  dataType: DataType
  attrName: String!
  term: String
  bool: Boolean
  lte: Float
  gte: Float
}

type CreateSupplementRecommended {
  success: Boolean!
  message: String!
  errors: [FormError!]
  supplementRecommended: SupplementRecommended
}

input CreateSupplementRecommendedInput {
  biomarkerId: ID!
  range: BiomarkerRangeInput
  normalValues: [Generic!]
  supplementId: ID!
}

type CreateThirdPartyAppCustomization {
  success: Boolean!
  message: String!
  customization: ThirdPartyAppCustomization
}

input CreateThirdPartyAppCustomizationInput {
  logo: Upload
  backgroundGradientColorFirst: String
  backgroundGradientColorSecond: String
  primaryColor: String
  secondaryColor: String
  selectedFeatures: [FeatureOption!]
}

type CreateUser {
  success: Boolean!
  message: String!
}

input CreateUserInput {
  email: String!
  name: String
  password: String!
  thirdPartySlug: String
  roles: [Role!]!
  enable2fa: Boolean
  selfReportedRole: Role
  active: Boolean
}

type CreateUserSegment {
  success: Boolean!
  message: String!
  userSegment: UserSegment
}

input CreateUserSegmentInput {
  """Name of the user segment"""
  name: String!

  """Priority over other user segments"""
  priority: Int

  """List of program ids using the segment to apply custom rules"""
  programs: [ID!]!

  """
  List of existing conditions that must match with the user's attrs to join the segment
  """
  conditions: [ID!]!

  """
  Add new conditions that must match with the user's attrs to join the segment
  """
  createConditions: [CreateSegmentConditionInput!]!

  """List of rule ids the are applied to the matching users"""
  rules: [ID!]!
}

type Cuisine {
  name: String!
}

type CuisineConnection {
  edges: [CuisineEdge!]!
  pageInfo: PageInfo!
}

type CuisineEdge {
  cursor: String!
  node: Cuisine
}

type CustomAttribute {
  id: ID!
  label: String!
  dataType: DataType
}

type CustomAttributeConnection {
  edges: [CustomAttributeEdge!]!
  pageInfo: PageInfo!
}

type CustomAttributeEdge {
  cursor: String!
  node: CustomAttribute
}

type DailyRecapAnswer {
  id: ID!
  thirdPartyId: Int
  answer: String!
  type: String!
}

enum DataType {
  RANGE
  NUMBER
  TERM
  BOOL
}

"""An ISO-8601 encoded UTC date string."""
scalar Datetime

type DeleteArticleRecommended {
  success: Boolean!
  message: String!
  articleRecommended: ArticleRecommended
}

type DeleteContentCategory {
  success: Boolean!
  message: String!
  contentCategory: ContentCategory
}

type DeleteContentLibrary {
  success: Boolean!
  message: String!
  contentLibrary: ContentLibrary
}

type DeleteContentTag {
  success: Boolean!
  message: String!
  contentTag: ContentTag
}

type DeleteCustomAttribute {
  success: Boolean!
  message: String!
  deleted: CustomAttribute
}

type DeleteDailyRecapAnswer {
  success: Boolean!
  message: String!
  dailyRecapAnswer: DailyRecapAnswer
}

type DeleteDailyRecapQuestion {
  success: Boolean!
  message: String!
  dailyRecapQuestion: ThirdPartyDailyRecapQuestion
}

type DeleteIngredient {
  success: Boolean!
  message: String!
  deleted: Ingredient
}

type DeleteIngredientGroup {
  success: Boolean!
  message: String!
  deleted: IngredientGroup
}

type DeleteProgram {
  success: Boolean!
  message: String!
  deleted: Program
}

type DeleteProgramGoal {
  success: Boolean!
  message: String!
  deleted: Goal
}

type DeleteRuleSet {
  success: Boolean!
  message: String!
  deleted: RuleSet
}

type DeleteSegmentCondition {
  success: Boolean!
  message: String!
}

type DeleteSupplementRecommended {
  success: Boolean!
  message: String!
  supplementRecommended: SupplementRecommended
}

type DeleteThirdPartyAppCustomization {
  success: Boolean!
  message: String!
}

type DeleteUser {
  success: Boolean!
  message: String!
  deleted: User
}

type DeleteUserSegment {
  success: Boolean!
  message: String
  deleted: UserSegment
}

scalar Email

enum Equation {
  HARRIS_BENEDICT
  ONCOLOGY
}

enum FeatureOption {
  MEAL_PLANNER
  RECIPE_FINDER
  RESTAURANTS
  PROGRESS_TRACKER
  FOOD_LOGGING
  WEIGHT_GOALS
  SUBSCRIPTIONS
  NOTIFICATIONS
  APPOINTMENTS
  GROCERY_LIST
  CHAT
  PROGRAMS
  PREFERENCES
  VIDEO_CALLS
  NUTRITION_DASHBOARD
  LAB_TESTS
  ONBOARDING
}

type FormError {
  field: String
  messages: [String!]
}

type Generate2faUri {
  success: Boolean!
  message: String!
  uri: String
}

scalar Generic

type Goal implements Node {
  id: ID!
  name: String!
  biologicalSex: BiologicalSex!
  programId: ID!
  nutrients: [NutrientGoal!]!
  minAge: Int
  maxAge: Int
  slug: String
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Ingredient implements Node {
  id: ID!
  name: String!
  slug: String!
  alias: [String!]!
  isActive: Boolean!
  createdAt: Datetime!
  isReadOnly: Boolean!
}

type IngredientGroup implements Node {
  id: ID!
  name: String!
  slug: String!
  groupType: IngredientGroupType!
  isActive: Boolean!
  createdAt: Datetime!
  ingredients: [Ingredient!]!
  isReadOnly: Boolean!
}

type IngredientGroupConnection {
  edges: [IngredientGroupEdge!]!
  pageInfo: PageInfo!
}

type IngredientGroupEdge {
  cursor: String!
  node: IngredientGroup
}

enum IngredientGroupType {
  RESTRICTION_GROUP
  BUILDING_GROUP
}

enum InvitationStatus {
  SENT
  ACCEPTED
}

type Login {
  success: Boolean!
  message: String!
  accessToken: String
  refreshToken: String
}

type Logout {
  success: Boolean!
  message: String!
}

type MakeCoach {
  success: Boolean!
  message: String!
}

input MakeCoachInput {
  email: String!
  name: String!
  isCoachAdmin: Boolean!
}

type Mutation {
  """Get and access tokens for the login profile"""
  login(email: String!, password: String!): Login!

  """Revokes the user authentication session"""
  logout: Logout!

  """Set a new role to the userID"""
  setRole(userID: ID!, role: Role!): SetRole!

  """Replace the roles of the userID"""
  setRoles(userID: ID!, roles: [Role!]!): SetRoles!

  """Create a new user with a non-admin role and member of a third party"""
  createUser(input: CreateUserInput!): CreateUser!

  """Grant access to the coaching portal to a user"""
  makeCoach(input: MakeCoachInput!): MakeCoach!

  """Change your password"""
  changePassword(old: String!, new: String!): ChangePassword!

  """Send an email to reset password"""
  requestPasswordReset(email: String!): RequestPasswordReset!

  """Set a new password for the user"""
  resetPassword(token: String!, password: String!): ResetPassword!

  """Create a new developer user and third party app"""
  signUpDeveloper(input: SignUpDeveloperInput!): SignUpDeveloper!
  verifyDeveloperEmail(token: String!, password: String!): VerifyDeveloperEmail!

  """Create a new `Program` owned by the profile's third party"""
  createProgram(input: CreateProgramInput!): CreateProgram!

  """Update the `Program` if it's owned by the profile's third party"""
  updateProgram(input: UpdateProgramInput!): UpdateProgram!

  """Copy a `Program`. The copy will be owned by the profile's third party"""
  copyProgram(id: ID!, rename: String): CopyProgram!

  """Create a new ingredient group with the ingredients received"""
  createIngredientGroup(input: CreateIngredientGroupInput!): CreateIngredientGroup!

  """Update the `IngredientGroup` if is owned by the user"""
  updateIngredientGroup(input: UpdateIngredientGroupInput!): UpdateIngredientGroup!

  """Delete an owned `IngredientGroup`"""
  deleteIngredientGroup(id: ID!): DeleteIngredientGroup!

  """Create a new ingredient available to add to a group"""
  createIngredient(name: String!, alias: [String!]): CreateIngredient!

  """Delete an owned ingredient"""
  deleteIngredient(id: ID!): DeleteIngredient!

  """Update an owned ingredient"""
  updateIngredient(input: UpdateIngredientInput!): UpdateIngredient!

  """
  Create a new rule set related to the ingredient groups by the action type
  """
  createRuleSet(input: CreateRuleSetInput!): CreateRuleSet!

  """Update an owned rule set by ID"""
  updateRuleSet(input: UpdateRuleSetInput!): UpdateRuleSet!

  """Remove an owned rule set by ID"""
  deleteRuleSet(id: ID!): DeleteRuleSet!

  """Create a new program goal"""
  createProgramGoal(input: CreateProgramGoalInput!): CreateProgramGoal!

  """Update an owned program goal"""
  updateProgramGoal(input: UpdateProgramGoalInput!): UpdateProgramGoal!

  """Delete an owned program goal"""
  deleteProgramGoal(goal: ID!): DeleteProgramGoal!

  """Create a new custom attribute label"""
  createCustomAttribute(label: String!, dataType: DataType): CreateCustomAttribute!

  """Update an owned custom attribute"""
  updateCustomAttribute(id: ID!, label: String, dataType: DataType): UpdateCustomAttribute!

  """Delete an owned custom attribute"""
  deleteCustomAttribute(id: ID!): DeleteCustomAttribute!

  """Create a new segment condition"""
  createSegmentCondition(input: CreateSegmentConditionInput!): CreateSegmentCondition!

  """Update a segment condition"""
  updateSegmentCondition(input: UpdateSegmentConditionInput!): UpdateSegmentCondition!

  """Delete a segment condition"""
  deleteSegmentCondition(id: ID!): DeleteSegmentCondition!

  """Create a user segment"""
  createUserSegment(input: CreateUserSegmentInput!): CreateUserSegment!

  """Update a user segment"""
  updateUserSegment(input: UpdateUserSegmentInput!): UpdateUserSegment!

  """Delete a user segment by ID"""
  deleteUserSegment(id: ID!): DeleteUserSegment!

  """Update a user"""
  updateUser(input: UpdateUserInput!): UpdateUser!

  """Delete a user by ID"""
  deleteUser(id: ID!): DeleteUser!

  """Generate URI to be encoded in a QR Code"""
  generate2faUri(email: String!): Generate2faUri!

  """Validate 2FA verification code"""
  verify2faCode(email: String!, code: String!): Verify2faCode!

  """Create Content Tags"""
  createContentTag(name: String!): CreateContentTag!

  """Update Content Tags"""
  updateContentTag(input: UpdateContentTagInput!): UpdateContentTag!

  """Delete Content Tag"""
  deleteContentTag(id: ID!): DeleteContentTag!

  """Create Content Category"""
  createContentCategory(input: CreateContentCategoryInput!): CreateContentCategory!

  """Update Content Category"""
  updateContentCategory(input: UpdateContentCategoryInput!): UpdateContentCategory!

  """Delete Content Category"""
  deleteContentCategory(id: ID!): DeleteContentCategory!

  """Create contentLibrary"""
  createContentLibrary(input: CreateContentLibraryInput!): CreateContentLibrary!

  """Update contentLibrary"""
  updateContentLibrary(input: UpdateContentLibraryInput!): UpdateContentLibrary!

  """Delete contentLibrary"""
  deleteContentLibrary(id: ID!): DeleteContentLibrary!

  """Create a supplement recommended"""
  createSupplementRecommended(input: CreateSupplementRecommendedInput!): CreateSupplementRecommended!

  """Update a supplement recommended"""
  updateSupplementRecommended(input: UpdateSupplementRecommendedInput!): UpdateSupplementRecommended!

  """Delete a supplement recommended"""
  deleteSupplementRecommended(id: ID!): DeleteSupplementRecommended!

  """Create an article recommended"""
  createArticleRecommended(input: CreateArticleRecommendedInput!): CreateArticleRecommended!

  """Update an article recommended"""
  updateArticleRecommended(input: UpdateArticleRecommendedInput!): UpdateArticleRecommended!

  """Delete an article recommended"""
  deleteArticleRecommended(id: ID!): DeleteArticleRecommended!

  """Mutation to add/remove category as subcategory"""
  setContentSubcategory(mainCategory: ID!, subcategory: ID!, action: SetAction!): SetContentSubcategory!

  """Create a ThirdPartyAppCustomization"""
  createThirdPartyAppCustomization(input: CreateThirdPartyAppCustomizationInput): CreateThirdPartyAppCustomization!

  """Update a ThirdPartyAppCustomization"""
  updateThirdPartyAppCustomization(input: UpdateThirdPartyAppCustomizationInput!): UpdateThirdPartyAppCustomization!

  """Delete a ThirdPartyAppCustomization"""
  deleteThirdPartyAppCustomization(id: ID!): DeleteThirdPartyAppCustomization!

  """Send invitation to user"""
  sendUserInvite(existingId: ID, create: CreateAndInviteUserInput): SendUserInvite!

  """Accept an invitation"""
  acceptUserInvite(token: String!, password: String!): AcceptUserInvite!

  """Create DailyRecapAnswer"""
  createDailyRecapAnswer(input: CreateDailyRecapAnswerInput!): CreateDailyRecapAnswer!

  """Update DailyRecapAnswer"""
  updateDailyRecapAnswer(input: UpdateDailyRecapAnswerInput!): UpdateDailyRecapAnswer!

  """Delete DailyRecapAnswer"""
  deleteDailyRecapAnswer(id: ID!): DeleteDailyRecapAnswer!

  """Create DailyRecapQuestion"""
  createDailyRecapQuestion(input: CreateDailyRecapQuestionInput!): CreateDailyRecapQuestion!

  """Update DailyRecapQuestion"""
  updateDailyRecapQuestion(input: UpdateDailyRecapQuestionInput!): UpdateDailyRecapQuestion!

  """Delete DailyRecapQuestion"""
  deleteDailyRecapQuestion(id: ID!): DeleteDailyRecapQuestion!

  """Update Third Party components"""
  updateThirdPartyTrackerComponent(input: UpdateThirdPartyTrackerComponentInput!): UpdateThirdPartyTrackerComponent!

  """Create Biomarker Category"""
  createBiomarkerCategory(input: CreateBiomarkerCategoryInput!): CreateBiomarkerCategory!

  """Update Biomarker Category"""
  updateBiomarkerCategory(input: UpdateBiomarkerCategoryInput!): UpdateBiomarkerCategory!

  """Create Third Party Biomarker"""
  addBiomarker(input: AddBiomarkerInput!): AddBiomarker!

  """Update Third Party Biomarker"""
  updateBiomarker(input: UpdateBiomarkerInput!): UpdateBiomarker!

  """Update openIA key field of third party model"""
  setOpenIAKey(input: SetOpenAIKeyInput!): SetOpenAIKey!
}

interface Node {
  id: ID!
}

type NutrientGoal implements Node {
  id: ID!
  unit: NutrientUnit!
  nutrient: NutrientType!
  goalAmount: Float!
  upperLimit: Float!
  lowerLimit: Float!
  createdAt: Datetime!
  updatedAt: Datetime!
}

input NutrientGoalInput {
  unit: NutrientUnit!
  nutrient: NutrientType!
  goalAmount: Float!
  upperLimit: Float!
  lowerLimit: Float!
}

enum NutrientType {
  NETCARBS
  CHOCDF
  PROCNT
  FAT
  CALCIUM
  CHROMIUM
  COPPER
  FLUORIDE
  IODINE
  IRON
  MAGNESIUM
  MANGANESE
  MOLYBDENUM
  PHOSPHORUS
  SELENIUM
  ZINC
  POTASSIUM
  SODIUM
  CHLORIDE
  VITAMIN_A
  VITAMIN_C
  VITAMIN_D
  VITAMIN_E
  VITAMIN_K
  THIAMIN
  RIBOFLAVIN
  NIACIN
  VITAMIN_B6
  FOLATE
  VITAMIN_B12
  PANTOTHENIC_ACID
  BIOTIN
  CHOLINE
  TOTAL_FIBER
  LINOLEIC_ACID
  ALPHA_LINOLENIC_ACID
}

enum NutrientUnit {
  PERCENT
  GRAM
  MILLIGRAM
  MICROGRAM
}

enum Operation {
  ADD
  REMOVE
  REPLACE
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!
  name: String!
  email: String!
  roles: [Role!]!
  permissions: [String!]!
  companyName: String!
  apiToken: String
  selfReportedRole: String @deprecated(reason: "Use roles instead")
  freeTrialRemainingDays: Int
  active: Boolean
  invitationExpireAt: Datetime
  thirdParty: ThirdParty
}

"""Diet Program that an app user can be subscribed to"""
type Program implements Node {
  id: ID!
  name: String!
  createdAt: Datetime!
  slug: String!
  author: String
  isActive: Boolean!
  isPremium: Boolean!
  descriptionShort: String
  descriptionLong: String
  comment: String
  order: Int!
  tags: [String!]!
  image: URI
  cover: URI
  backgroundImage: URI
  authorAvatar: URI
  emailCampaignId: String
  mailchimpWorkflowEmailId: String
  dynamicProgramParent: String
  ruleSets: [RuleSet!]!
  isReadOnly: Boolean!
  restrictions: [Restriction!]!
  visibility: Boolean!
  energyNutrientEquation: Equation
}

type ProgramConnection {
  edges: [ProgramEdge!]!
  pageInfo: PageInfo!
}

type ProgramEdge {
  cursor: String!
  node: Program
}

input ProgramOrderBy {
  field: ProgramOrderByField
  order: SortOrder
}

enum ProgramOrderByField {
  NAME
  AUTHOR
  CREATED_AT
  IS_ACTIVE
}

type Query {
  """Return the logged-in profile info, like email or roles"""
  me: Profile

  """List the logged-in profile permissions"""
  userPermissions: [String!]!

  """Fetch a user details"""
  user(id: ID!): User

  """List all the users"""
  users(first: Int, last: Int, after: String, before: String, search: String): UserConnection!

  """Retrieve a list with available program's restrictions"""
  restrictions(first: Int, last: Int, after: String, before: String): RestrictionConnection!

  """Retrieve a `Program` by ID, or null if it doesn't exist"""
  program(id: ID!): Program

  """List all `Program` available for the profile"""
  programs(visibility: Boolean, first: Int, after: String, readOnly: Boolean, isActive: Boolean, orderBy: ProgramOrderBy): ProgramConnection!

  """List all owned and read-only ingredients"""
  ingredients(readOnly: Boolean): [Ingredient!]!

  """Retrieve an `IngredientGroup` by ID, or null if it doesn't exist"""
  ingredientGroup(id: ID!): IngredientGroup

  """List all `IngredientGroup` available for the profile"""
  ingredientGroups(first: Int, last: Int, after: String, before: String, readOnly: Boolean, search: String, onlyRestrictions: Boolean, onlyBuildingGroups: Boolean): IngredientGroupConnection!

  """List all read-only and owned `RuleSet` ordered by name"""
  ruleSets(first: Int, after: String, program: ID, readOnly: Boolean): RuleSetConnection!

  """Retrieve a `RuleSet` by ID, or null if it doesn't exist"""
  ruleSet(id: ID!): RuleSet

  """List goals assigned to a program"""
  programGoals(program: ID!): [Goal!]!

  """List custom attributes"""
  customAttributes(first: Int, last: Int, after: String, before: String): CustomAttributeConnection!

  """List segment conditions"""
  segmentConditions(first: Int, last: Int, after: String, before: String): ConditionConnection!

  """Retrieve a condition by ID"""
  segmentCondition(id: ID!): Condition

  """List user segments"""
  userSegments(first: Int, last: Int, after: String, before: String): UserSegmentConnection!

  """Retrieve a user segment by ID"""
  userSegment(id: ID!): UserSegment
  availableThirdParties: [ThirdParty!]!

  """List Content Tags"""
  contentTags(first: Int, last: Int, after: String, before: String, name: String): ContentTagConnection!

  """List Content Categories"""
  contentCategories(first: Int, last: Int, after: String, before: String, id: ID, tags: [String!]): ContentCategoryConnection!

  """List Content Libraries"""
  contentLibraries(first: Int, last: Int, after: String, before: String, id: ID, search: String, categories: [ID!], tags: [String!], order: ContentLibraryOrderBy): ContentLibraryConnection!

  """List Supplement Recommended"""
  supplementsRecommended(id: ID, offset: Int, before: String, after: String, first: Int, last: Int): SupplementRecommendedConnection

  """List Article Recommended"""
  articlesRecommended(id: ID, offset: Int, before: String, after: String, first: Int, last: Int): ArticleRecommendedConnection

  """Retrieve Features for AppCustomization"""
  appCustomizationFeatures: [appCustomizationFeature!]!

  """
  Retrieve an user ThirdPartyAppCustomization or null if it doesn't exist
  """
  thirdPartyAppCustomization: ThirdPartyAppCustomization

  """Daily Recap Answers & Questions"""
  thirdPartyDailyRecapAnswers(answer: String, answerType: String): [DailyRecapAnswer!]
  thirdPartyDailyRecapQuestions(question: String, answers: [ID!], before: String, after: String, first: Int, last: Int): ThirdPartyDailyRecapQuestionConnection

  """Retrieve Recipe tags"""
  recipeTags(name: String, before: String, after: String, first: Int, last: Int): RecipeTagConnection

  """Retrieve third-party enabled trackers"""
  enabledTrackers: [TrackerComponent!]

  """List Recipe's Cuisines"""
  cuisines(name: String, before: String, after: String, first: Int, last: Int): CuisineConnection

  """List biomarkers"""
  biomarkers(id: ID, filters: BiomarkerFilterInput, before: String, after: String, first: Int, last: Int): BiomarkerConnection

  """List biomarker categories"""
  biomarkerCategories(id: ID, parentId: ID, before: String, after: String, first: Int, last: Int): BiomarkerCategoryConnection
}

type RecipeTag implements Node {
  id: ID!
  displayName: String!
  termName: String!
}

type RecipeTagConnection {
  pageInfo: PageInfo!
  edges: [RecipeTagEdge]!
}

type RecipeTagEdge {
  node: RecipeTag
  cursor: String!
}

type RequestPasswordReset {
  success: Boolean!
  message: String!
}

type ResetPassword {
  success: Boolean!
  message: String!
}

type Restriction implements Node {
  id: ID!
  name: String!
  slug: String!
}

type RestrictionConnection {
  edges: [RestrictionEdge!]!
  pageInfo: PageInfo!
}

type RestrictionEdge {
  cursor: String!
  node: Restriction
}

enum Role {
  VIEWER
  DEVELOPER
  ADMIN
  SUPER_ADMIN
  COACH
  COACH_ALL_MEMBERS
  INACTIVE_COACH
  NON_VERIFIED_COACH
  COACH_ADMIN
  FREE_DEVELOPER
  FULL_ACCESS
  CREATOR
}

type RuleSet implements Node {
  id: ID!
  order: Int!
  name: String!
  actionType: RuleSetActionType!
  ingredientGroups: [IngredientGroup!]
  ruleType: String!
  recipeTags: [RecipeTag!]
  userSegments: [UserSegment!]!
  program: Program
  comment: String
  tags: [String!]
  sources: [String!]
  publicName: String
  publicComment: String
  simpleName: String
  simpleExamples: String
  visibility: Boolean!
  isReadOnly: Boolean!
  priority: Int!
}

enum RuleSetActionType {
  AVOID
  INCREASE
  DECREASE
}

type RuleSetConnection {
  edges: [RuleSetEdge!]!
  pageInfo: PageInfo!
}

type RuleSetEdge {
  cursor: String!
  node: RuleSet
}

enum RuleType {
  INGREDIENT_GROUPS
  RECIPE_TAGS
}

type SendUserInvite {
  success: Boolean!
  message: String!
  user: User
}

enum SetAction {
  ADD
  REMOVE
}

type SetContentSubcategory {
  success: Boolean!
  message: String!
}

type SetOpenAIKey {
  success: Boolean!
  message: String!
  key: String
}

input SetOpenAIKeyInput {
  key: String!
}

type SetRole {
  success: Boolean!
  message: String!
}

type SetRoles {
  success: Boolean!
  message: String!
}

type SignUpDeveloper {
  success: Boolean!
  message: String!
}

input SignUpDeveloperInput {
  email: Email!
  firstName: String!
  lastName: String!
  companyName: String
}

enum SortOrder {
  ASC
  DESC
}

type Supplement {
  id: ID!
  name: String!
  description: String
  category: String!
  mainImage: String!
  images: [String!]
  brand: String!
  directionsOfUse: [SupplementDirection!]!
  directionsOfUseText: String
  servingName: String!
  sizeCount: Int!
  externalId: String
  sku: String
  storeId: String
  shopifyVariantId: String
  shopifyParentId: String
  instructions: String
  ingredients: String
  supplementFacts: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type SupplementDirection {
  quantity: Float!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: ID!
  timeOfDay: TimeOfDay!
}

type SupplementRecommended implements Node {
  valueMax: Float
  valueMin: Float
  createdAt: Datetime!
  updatedAt: Datetime!
  id: ID!
  supplement: Supplement!
  biomarker: Biomarker!
  normalValues: [Generic!]
}

type SupplementRecommendedConnection {
  pageInfo: PageInfo!
  edges: [SupplementRecommendedEdge]!
}

type SupplementRecommendedEdge {
  node: SupplementRecommended
  cursor: String!
}

type ThirdParty {
  name: String!
  slug: String!
  openaiKey: String
}

type ThirdPartyAppCustomization {
  id: ID!
  thirdPartyId: Int!
  logo: String
  backgroundGradientColorFirst: String
  backgroundGradientColorSecond: String
  primaryColor: String
  secondaryColor: String
  selectedFeatures: [FeatureOption!]
}

type ThirdPartyDailyRecapQuestion implements Node {
  id: ID!
  question: String!
  imageUrl: String
  programId: String
  thirdParty: Int
  answers: [DailyRecapAnswer!]!
}

type ThirdPartyDailyRecapQuestionConnection {
  edges: [ThirdPartyDailyRecapQuestionEdge!]!
  pageInfo: PageInfo!
}

type ThirdPartyDailyRecapQuestionEdge {
  cursor: String!
  node: ThirdPartyDailyRecapQuestion
}

enum TimeOfDay {
  AT_WAKING
  WITH_BREAKFAST
  WITH_LUNCH
  WITH_DINNER
  AT_BEDTIME
}

enum TrackerComponent {
  DAILY_RECAP
  DAILY_MOOD
  WEIGHT_TRACKER
  MP_MEAL_TRACKER
  HYDRATION_TRACKER
  TODAY_FOOD
  TODAY_SUPPLEMENT
  FOOD_LOGS
  STEPS_TRACKER
  EXERCISE_TRACKER
  PLAN_SUPPLEMENT
  MY_CHECKLIST_TRACKER
  SLEEP_TIME_TRACKER
  SLEEP_QUALITY_SCORE_TRACKER
  HRV_TRACKER
  HEART_RATE_TRACKER
  PLAN_SUPPLEMENTS_MY_CHECKLIST
  FOOD_LOG_MEAL_TRACKER
}

type UpdateArticleRecommended {
  success: Boolean!
  message: String!
  errors: [FormError!]
  articleRecommended: ArticleRecommended
}

input UpdateArticleRecommendedInput {
  id: ID!
  biomarkerId: ID
  range: BiomarkerRangeInput
  normalValues: [Generic!]
  articleId: ID
}

type UpdateBiomarker {
  success: Boolean!
  message: String!
  errors: [FormError!]
  biomarker: Biomarker
}

type UpdateBiomarkerCategory {
  success: Boolean!
  message: String!
  errors: [FormError!]
  biomarkerCategory: BiomarkerCategory
}

input UpdateBiomarkerCategoryInput {
  id: ID!
  name: String
  parent: ID
}

input UpdateBiomarkerInput {
  id: ID!
  name: String
  category: ID
  method: String
  description: String
  order: Int
  isVisible: Boolean
  range: BiomarkerRangeInput
  optimalRange: BiomarkerRangeInput
  borderlineRange: BiomarkerRangeInput
  units: [ID!]
  aliases: [BiomarkerAliasInput!]
  normalValues: [Generic!]
}

type UpdateContentCategory {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentCategory: ContentCategory
}

input UpdateContentCategoryInput {
  id: ID!
  name: String
  order: Int
  subcategories: [ID!]
  image: Upload
  tags: [ID!]
  lang: Generic
}

type UpdateContentLibrary {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentLibrary: ContentLibrary
}

input UpdateContentLibraryInput {
  id: ID!
  title: String
  imageUrl: String
  sourceUrl: String
  order: Int
  subTitle: String
  isBlocked: Boolean
  isFeatured: Boolean
  lang: Generic
  categories: [ID!]
  tags: [ID!]
  programs: [ID!]
}

type UpdateContentTag {
  success: Boolean!
  message: String!
  errors: [FormError!]
  contentTag: ContentTag
}

input UpdateContentTagInput {
  id: ID!
  name: String!
}

type UpdateCustomAttribute {
  success: Boolean!
  message: String!
  customAttribute: CustomAttribute
}

type UpdateDailyRecapAnswer {
  success: Boolean!
  message: String!
  errors: [FormError!]
  dailyRecapAnswer: DailyRecapAnswer
}

input UpdateDailyRecapAnswerInput {
  id: ID!
  answer: String
  type: String
}

type UpdateDailyRecapQuestion {
  success: Boolean!
  message: String!
  errors: [FormError!]
  dailyRecapQuestion: ThirdPartyDailyRecapQuestion
}

input UpdateDailyRecapQuestionInput {
  id: ID!
  question: String
  imageUrl: String
  program: ID
  answers: [ID!]
}

type UpdateIngredient {
  success: Boolean!
  message: String!
  ingredient: Ingredient
}

type UpdateIngredientGroup {
  success: Boolean!
  message: String!
  updated: IngredientGroup
}

input UpdateIngredientGroupInput {
  id: ID!
  name: String
  ingredients: [ID!]
}

input UpdateIngredientInput {
  id: ID!
  name: String
  alias: [String!]
}

type UpdateProgram {
  success: Boolean!
  message: String!
  updated: Program
}

type UpdateProgramGoal {
  success: Boolean!
  message: String!
  goal: Goal
}

input UpdateProgramGoalInput {
  id: ID!
  name: String
  biologicalSex: BiologicalSex
  programId: ID
  nutrients: [NutrientGoalInput!]
  minAge: Int
  maxAge: Int
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
}

input UpdateProgramInput {
  id: ID!
  name: String
  author: String
  isActive: Boolean
  descriptionShort: String
  descriptionLong: String
  restrictions: [ID!]
  visibility: Boolean
  energyNutrientEquation: Equation
  image: Upload
  cover: Upload
  backgroundImage: Upload
  authorAvatar: Upload
}

type UpdateRuleSet {
  success: Boolean!
  message: String!
  updated: RuleSet
}

input UpdateRuleSetInput {
  id: ID!
  order: Int
  name: String
  actionType: RuleSetActionType
  ruleType: RuleType
  recipeTags: [ID!]
  userSegments: [ID!]
  ingredientGroups: [ID!]
  program: ID
  comment: String
  tags: [String!]
  sources: [String!]
  publicName: String
  publicComment: String
  simpleName: String
  simpleExamples: String
  priority: Int
  visibility: Boolean
}

type UpdateSegmentCondition {
  success: Boolean!
  message: String!
  condition: Condition
}

input UpdateSegmentConditionInput {
  id: ID!
  dataType: DataType
  attrName: String
  term: String
  bool: Boolean
  lte: Float
  gte: Float
}

type UpdateSupplementRecommended {
  success: Boolean!
  message: String!
  errors: [FormError!]
  supplementRecommended: SupplementRecommended
}

input UpdateSupplementRecommendedInput {
  id: ID!
  biomarkerId: ID
  range: BiomarkerRangeInput
  normalValues: [Generic!]
  supplementId: ID
}

type UpdateThirdPartyAppCustomization {
  success: Boolean!
  message: String!
  customization: ThirdPartyAppCustomization
}

input UpdateThirdPartyAppCustomizationInput {
  id: ID!
  logo: Upload
  backgroundGradientColorFirst: String
  backgroundGradientColorSecond: String
  primaryColor: String
  secondaryColor: String
  selectedFeatures: [FeatureOption!]
}

type UpdateThirdPartyTrackerComponent {
  success: Boolean!
  message: String!
  enabledComponents: [TrackerComponent!]
}

input UpdateThirdPartyTrackerComponentInput {
  components: [TrackerComponent!]!
  operation: Operation!
}

type UpdateUser {
  success: Boolean!
  message: String!
  user: User
}

input UpdateUserInput {
  id: String!
  email: String
  name: String
  enable2fa: Boolean
  selfReportedRole: Role
  active: Boolean
  roles: [Role!]
}

type UpdateUserSegment {
  success: Boolean!
  message: String!
  userSegment: UserSegment
}

input UpdateUserSegmentInput {
  """ID of the user segment to update"""
  id: ID!

  """Name of the user segment"""
  name: String

  """Priority over other user segments"""
  priority: Int

  """List of program ids using the segment to apply custom rules"""
  programs: [ID!]

  """
  List of existing conditions that must match with the user's attrs to join the segment
  """
  conditions: [ID!]

  """
  Add new conditions that must match with the user's attrs to join the segment
  """
  createConditions: [CreateSegmentConditionInput!]

  """List of rule ids the are applied to the matching users"""
  rules: [ID!]
}

scalar Upload

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

type User implements Node {
  id: ID!
  email: String!
  roles: [Role!]!
  freeTrialRemainingDays: Int
  selfReportedRole: String @deprecated(reason: "Use roles instead")
  active: Boolean
  createdAt: Datetime!
  invitationExpireAt: Datetime
  invitationStatus: InvitationStatus
  invitationHasExpired: Boolean
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserSegment {
  id: ID!
  name: String!
  priority: Int!
  programs: [Program!]!
  conditions: [Condition!]!
  rules: [RuleSet!]!
  dataType: DataType
}

type UserSegmentConnection {
  edges: [UserSegmentEdge!]!
  pageInfo: PageInfo!
}

type UserSegmentEdge {
  cursor: String!
  node: UserSegment
}

type Verify2faCode {
  success: Boolean!
  message: String!
}

type VerifyDeveloperEmail {
  success: Boolean!
  message: String!
  accessToken: String
  refreshToken: String
  profile: Profile
}

