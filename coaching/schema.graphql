enum ActivityLevel {
  NOT_ACTIVE
  EXERCISE_1_2
  EXERCISE_3_MORE
}

type ActivityLog implements Node {
  eventName: String!
  id: ID!
  userEmail: String
  userName: String
  payload: GenericScalar
  createdAt: DateTime
}

type ActivityLogConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ActivityLogEdge]!
}

"""A Relay edge containing a `ActivityLog` and its cursor."""
type ActivityLogEdge {
  """The item at the end of the edge"""
  node: ActivityLog

  """A cursor for use in pagination"""
  cursor: String!
}

type ActivityStreak {
  isToday: Boolean!
  dayStatus: DayStatus
  date: Date
  hasPreviousStreak: Boolean
  activities: [ActivityType]
}

enum ActivityType {
  DAILY_RECAP
  FOOD_LOGS
  TODAY_FOOD
  STEPS_TRACKER
  WEIGHT_TRACKER
  MP_MEAL_TRACKER
  EXERCISE_TRACKER
  TODAY_SUPPLEMENT
  HYDRATION_TRACKER
  PLAN_SUPPLEMENT
  MY_CHECKLIST_TRACKER
  SLEEP_TIME_TRACKER
  SLEEP_QUALITY_SCORE_TRACKER
  HRV_TRACKER
  HEART_RATE_TRACKER
  PLAN_SUPPLEMENTS_MY_CHECKLIST
  FOOD_LOG_MEAL_TRACKER
  DAILY_MOOD
}

type AddAppointmentCredits {
  success: Boolean!
  message: String!
  credits: AppointmentCredit
}

type AddBiomarker {
  success: Boolean!
  message: String!
  errors: [FormError!]
  biomarker: Biomarker
}

input AddBiomarkerInput {
  name: String!
  category: ID!
  method: String
  description: String
  order: Int = 0
  isVisible: Boolean = true
  range: BiomarkerRangeInput
  optimalRange: BiomarkerRangeInput
  borderlineRange: BiomarkerRangeInput
  units: [ID!]!
  aliases: [BiomarkerAliasInput!]
  normalValues: [GenericScalar!]
}

type AddBiomarkerResults {
  success: Boolean!
  message: String!
  errors: [FormError!]
}

input AddBiomarkerResultsInput {
  labTestReportId: ID!
  biomarkers: [BiomarkerResultInput!]!
}

enum AlertAction {
  ATTEMPTED
  CONTACTED
}

enum AlertStatus {
  IN_REVIEW
  REVIEWED
  OUT_OF_RANGE
  OTHER
  FOLLOW_UP
  NO_FOLLOW_UP
  COMPLETED
}

type AnswerCounter {
  total: Int!
  answer: DailyRecapAnswer!
}

type Appointment {
  id: ID!
  title: String!
  description: String
  meetingUrl: String
  start: DateTime!
  end: DateTime!
  attendees: [Attendee!]!
  status: EventStatus!
  recurringSetting: AppointmentFrequency
  appointmentType: AppointmentType!
  contactType: CalendarContactType!
  createdAt: DateTime
  coach: Coach
  sendbirdRoomId: String @deprecated(reason: "Soon it will be removed")
  availabilityTimezone: String!
  zoomSessionName: String
  zoomSessionPassword: String
}

type AppointmentCredit {
  id: ID!
  appointmentType: AppointmentType!
  value: Int!
}

type AppointmentFrequency {
  frequency: Frequency!
  interval: Int
  count: Int
}

input AppointmentFrequencyInput {
  frequency: Frequency!
  interval: Int
  count: Int
}

enum AppointmentMultiCoachType {
  INDIVIDUAL
  COLLECTIVE
  ANY_COACH_AVAILABLE
}

type AppointmentSettings {
  sendInitialNoticeEmail: Boolean
  emailReminders: [Int!]
  pushReminders: [Int!]
}

type AppointmentsInDate {
  date: Date!
  appointments: [Appointment!]!
}

type AppointmentType {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  numberOfMember: Int!
  durationMin: Int!
  contactType: [CalendarContactType!]!
  multiCoachType: AppointmentMultiCoachType!
  coachesPool: [Coach!]!
  initialBuffer: Int!
  refundableBeforeHours: Int!
}

type AppointmentTypes {
  types: [AppointmentType]!
}

input AppUserActivityLogFiltersInput {
  memberId: ID
  eventName: String
}

type Attendee {
  email: String!
  status: EventParticipationStatus!
  displayName: String
  member: Member
}

type AvailabilitySettings {
  bufferMinutes: Int
  startInterval: Int
  timezone: String
}

input AvailabilitySettingsInput {
  bufferMinutes: Int
  startInterval: Int
  timezone: String!
  weeklyRules: [WeeklyPeriodInput!]!
}

type AvailabilityWeekdayPeriod {
  start: Time
  end: Time
}

input AvailabilityWeekdayPeriodInput {
  start: Time
  end: Time
}

type AvailableProtocols {
  owned(group: ProtocolGroup, id: ID, coachTypes: [ID!], offset: Int, before: String, after: String, first: Int, last: Int): ProtocolConnection
  shared(group: ProtocolGroup, id: ID, coachTypes: [ID!], offset: Int, before: String, after: String, first: Int, last: Int): ProtocolConnection
}

type AvailableSupplementPlanTemplates {
  owned(id: ID, coachTypes: [ID!], offset: Int, before: String, after: String, first: Int, last: Int): SupplementPlanTemplateConnection
  shared(id: ID, coachTypes: [ID!], offset: Int, before: String, after: String, first: Int, last: Int): SupplementPlanTemplateConnection
}

enum BiologicalSex {
  MALE
  FEMALE
  UNCERTAIN
  UNKNOWN
  PREFER_NOT_TO_DISCLOSE
}

type Biomarker {
  id: ID!
  name: String!
  method: String
  category: BiomarkerCategory!
  units: [BiomarkerUnit!]!
  aliases: [BiomarkerAlias!]
  description: String
  range: BiomarkerRange
  optimalRange: BiomarkerRange
  borderlineRange: BiomarkerRange
  normalValues: [GenericScalar!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BiomarkerAlias {
  name: String!
  language: String!
}

input BiomarkerAliasInput {
  name: String!
  language: BiomarkerLanguage!
}

type BiomarkerCategory implements Node {
  name: String!
  parent: BiomarkerCategory
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object."""
  id: ID!
}

type BiomarkerCategoryConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BiomarkerCategoryEdge]!
}

"""A Relay edge containing a `BiomarkerCategory` and its cursor."""
type BiomarkerCategoryEdge {
  """The item at the end of the edge"""
  node: BiomarkerCategory

  """A cursor for use in pagination"""
  cursor: String!
}

type BiomarkerConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BiomarkerEdge]!
}

"""A Relay edge containing a `Biomarker` and its cursor."""
type BiomarkerEdge {
  """The item at the end of the edge"""
  node: Biomarker

  """A cursor for use in pagination"""
  cursor: String!
}

input BiomarkerFilterInput {
  name: String
  categoryId: ID
}

enum BiomarkerIntervalRange {
  ALL
  OUT_RANGE
  IN_RANGE
  IN_OPTIMAL_RANGE
}

enum BiomarkerLanguage {
  AFRIKAANS
  ALBANIAN
  ARABIC
  CATALAN
  CHINESE
  CROATIAN
  CZECH
  DANISH
  DUTCH
  ENGLISH
  ESTONIAN
  FRENCH
  GERMAN
  HEBREW
  HINDI
  INDONESIAN
  ITALIAN
  JAPANESE
  KOREAN
  POLISH
  PORTUGUESE
  ROMANIAN
  RUSSIAN
  SERBIAN
  SPANISH
  SWEDISH
  THAI
  TURKISH
  UKRAINIAN
  VIETNAMESE
  ZULU
}

type BiomarkerRange {
  max: Float
  min: Float
}

input BiomarkerRangeInput {
  max: Float!
  min: Float!
}

input BiomarkerResultInput {
  biomarkerId: ID!
  biomarkerUnitId: ID!
  result: BiomarkerValueInput!
  date: String!
  alert: Boolean
  alertText: String
}

input BiomarkerResultsFilterInput {
  categoryId: ID
  biomarkerId: ID
  biomarkerName: String
  intervalRange: BiomarkerIntervalRange
}

type BiomarkerUnit implements Node {
  name: String!
  factor: Float!
  alias: String
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object."""
  id: ID!
}

type BiomarkerUnitConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BiomarkerUnitEdge]!
}

"""A Relay edge containing a `BiomarkerUnit` and its cursor."""
type BiomarkerUnitEdge {
  """The item at the end of the edge"""
  node: BiomarkerUnit

  """A cursor for use in pagination"""
  cursor: String!
}

enum BiomarkerValueDatatype {
  BOOLEAN
  STRING
  NUMBER
}

input BiomarkerValueInput {
  type: BiomarkerValueDatatype!
  value: GenericScalar!
}

enum CalendarContactType {
  VIDEO_CALL
  GOOGLE_MEET
  ZOOM
  PHONE_CALL
}

type ChecklistItem {
  title: String!
  image: String!
  checked: Boolean!
  subtitle: String
  category: String
}

type Coach implements Node {
  """The ID of the object."""
  id: ID!
  name: String
  email: String!
  roles: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  members(before: String, after: String, first: Int, last: Int): MemberConnection
  avatarUrl: String
  unitSystem: UnitSystem!
  isAdmin: Boolean!
  isDisabled: Boolean!
  canSeeAllMembers: Boolean!
  permissions: [String!]!
  sendbirdToken: String @deprecated(reason: "Renamed. Use sendbirdAccessToken instead")
  sendbirdId: String
  sendbirdHasEverLoggedIn: Boolean!
  sendbirdAccessToken: String
  availabilitySettings: AvailabilitySettings!
  autoResponse: String
  isCalendarAuth: Boolean!
  conferencingProfiles: [ConferenceProviderName!]!
  externalCalendarEvents(start: Date, end: Date, timezone: String): [ExternalCalendarEventsInDate!]!
  appointmentsByDate(fromDate: Date, toDate: Date, timezone: String): [AppointmentsInDate!]!
  recentlyCreatedAppointments(before: DateTime): [Appointment!]!
  stripeCustomerId: String
  affiliateId: String
  weeklyRules: [WeeklyRules!]
  isPrimary: Boolean
  showAllMembers: Boolean!
  coachTypes(before: String, after: String, first: Int, last: Int): CoachTypeConnection
  coachTeams(before: String, after: String, first: Int, last: Int): CoachTeamConnection
}

input CoachActivityLogFiltersInput {
  start: DateTime
  end: DateTime
  coachId: ID
  memberId: ID
  eventName: String
}

input CoachAllowSeeAllInput {
  id: ID!

  """Set to true to enable the new status, or false to undo the change."""
  value: Boolean!
  clientMutationId: String
}

"""Se coach role to a "can see all" coach who can list all owned members"""
type CoachAllowSeeAllPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type CoachConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CoachEdge]!
}

input CoachDeleteInput {
  id: ID!
  clientMutationId: String
}

type CoachDeletePayload {
  coach: Coach
  success: Boolean!
  message: String!
  clientMutationId: String
}

input CoachDisableInput {
  id: ID!

  """Set to true to enable the new status, or false to undo the change."""
  value: Boolean!
  clientMutationId: String
}

"""Set coach role to INACTIVE_COACH (no permissions)"""
type CoachDisablePayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

"""A Relay edge containing a `Coach` and its cursor."""
type CoachEdge {
  """The item at the end of the edge"""
  node: Coach

  """A cursor for use in pagination"""
  cursor: String!
}

input CoachFiltersInput {
  name: String
  isActive: Boolean
  coachTypes: [ID!]
  coachTeams: [ID!]
}

input CoachMakeAdminInput {
  id: ID!

  """Set to true to enable the new status, or false to undo the change."""
  value: Boolean!
  clientMutationId: String
}

"""Set coach role to COACH_ADMIN"""
type CoachMakeAdminPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input CoachResetPasswordInput {
  code: String!
  newPassword: String!
  clientMutationId: String
}

type CoachResetPasswordPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type CoachTeam {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  coaches: [Coach!]
}

type CoachTeamConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CoachTeamEdge]!
}

"""A Relay edge containing a `CoachTeam` and its cursor."""
type CoachTeamEdge {
  """The item at the end of the edge"""
  node: CoachTeam

  """A cursor for use in pagination"""
  cursor: String!
}

input CoachTeamsFilterInput {
  name: String
}

type CoachType {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  coaches: [Coach!]
}

type CoachTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CoachTypeEdge]!
}

"""A Relay edge containing a `CoachType` and its cursor."""
type CoachTypeEdge {
  """The item at the end of the edge"""
  node: CoachType

  """A cursor for use in pagination"""
  cursor: String!
}

input CoachTypesFilterInput {
  name: String
}

input CoachUpdateAvatarInput {
  id: ID!
  avatar: Upload!
  clientMutationId: String
}

type CoachUpdateAvatarPayload {
  success: Boolean!
  message: String!
  coach: Coach
  clientMutationId: String
}

input CoachUpdateInput {
  id: ID!
  email: String
  password: UpdatePasswordInput
  name: String
  disabled: Boolean
  makeAdmin: Boolean
  allowSeeAll: Boolean
  members: [ID]
  enable2fa: Boolean
  affiliateId: String
  coachTypes: [ID!]
  coachTeams: [ID!]
  roles: [String]
  clientMutationId: String
}

type CoachUpdatePayload {
  success: Boolean!
  message: String!
  coach: Coach
  clientMutationId: String
}

enum ConferenceProviderName {
  MS_TEAMS
  GO_TO
  ZOOM
}

type ConnectedSource {
  sourceId: Int!
  createdAt: DateTime!
  id: ID!
  sourceName: SourceType!

  """Indicates if it is the selected active source."""
  currentActive: Boolean!
}

type ContentCategory {
  id: ID!
  image: String
  name: String
  order: Int!
  slug: String!
  lang: JSONString
  subcategories: [ContentCategory!]
  tags: [ContentTag!]
}

type ContentLibrary {
  id: ID!
  isFavorite: Boolean!
  isFeatured: Boolean!
  categories: [ContentCategory]
  tags: [ContentTag!]
  title: String
  subTitle: String
  imageUrl: String
  sourceUrl: String
  order: Int!
  isBlocked: Boolean!
  lang: JSONString
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContentLibraryConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContentLibraryEdge]!
}

"""A Relay edge containing a `ContentLibrary` and its cursor."""
type ContentLibraryEdge {
  """The item at the end of the edge"""
  node: ContentLibrary

  """A cursor for use in pagination"""
  cursor: String!
}

type ContentTag {
  id: ID!
  name: String!
}

type CreateAppointmentEvent {
  success: Boolean!
  message: String!
  event: Appointment
}

input CreateAppointmentEventInput {
  appointmentTypeId: ID!
  timezone: String
  start: DateTime!
  description: String
  url: String
  location: Location
  attendees: [ID!]
  allowFree: Boolean
  allowNotRegistered: Boolean
  contactType: CalendarContactType
  recurring: AppointmentFrequencyInput
  byCoach: ID
}

type CreateAppointmentType {
  success: Boolean!
  message: String!
  appointmentType: AppointmentType
}

input CreateCoachTeamInput {
  name: String!
  description: String
  coaches: [ID!]
  clientMutationId: String
}

type CreateCoachTeamPayload {
  success: Boolean!
  message: String!
  errors: [FormError!]
  coachTeam: CoachTeam
  clientMutationId: String
}

input CreateCoachTypeInput {
  name: String!
  description: String
  coaches: [ID!]
  clientMutationId: String
}

type CreateCoachTypePayload {
  success: Boolean!
  message: String!
  errors: [FormError!]
  coachType: CoachType
  clientMutationId: String
}

type CreateGroupChannel {
  success: Boolean!
  message: String!
  channelUrl: String
  responseRaw: JSONString
}

input CreateGroupChannelInput {
  memberIds: [ID!]!
  nameChannel: String
  channelUrl: String
  isDistinct: Boolean
  coverUrl: String
  customType: String
  data: String
  isEphemeral: Boolean
  accessCode: String
}

type CreateLabTestReport {
  success: Boolean!
  message: String!
  report: LabTestReport
}

input CreateMealPlanInput {
  """Max preparation time in minutes per meal time"""
  maxTimeMinutes: IntValueByMealTime

  """Max num of ingredients in recipe per meal time"""
  maxIngredientsCount: IntValueByMealTime

  """Upper kcal limit per meal, as a percentage of daily goal"""
  kcalLimit: Float

  """Maximum number of servings per meal allowed in the meal plan"""
  maxNumOfServings: Int

  """Maximum serving weight per meal allowed in the meal plan"""
  maxServingWeight: Int

  """Minimum serving weight per meal allowed in the meal plan"""
  minServingWeight: Int

  """Percentage of the daily kcal goal that each breakfast covers"""
  breakfastDistribution: Float

  """Percentage of the daily kcal goal that each lunch covers"""
  lunchDistribution: Float

  """Percentage of the daily kcal goal that each dinner covers"""
  dinnerDistribution: Float

  """Percentage of the daily kcal goal that each snack covers"""
  snackDistribution: Float
  isCache: Boolean
  addDays: Boolean
  ignoreLock: Boolean
  includeFavorites: Boolean
  repeat: DateTime
}

type CreateMealPlanTemplate {
  success: Boolean!
  message: String!
  mealPlan: MealPlanTemplate
}

type CreateMembersTag {
  success: Boolean!
  message: String!
  tag: MemberTag
}

input CreateMemberTagInput {
  tag: String!
  color: String = ""
}

input CreateNoteInput {
  memberId: ID!
  title: String!
  text: String
  eventId: ID
  clientMutationId: String
}

type CreateNotePayload {
  success: Boolean!
  message: String!
  note: Note
  clientMutationId: String
}

type CreateNoteTemplate {
  success: Boolean!
  message: String!
  noteTemplate: NoteTemplate
}

type CreateProtocol {
  success: Boolean!
  message: String!
  protocol: Protocol
}

input CreateProtocolInput {
  name: String!
  length: Int
  programId: ID
  isPublic: Boolean
  isActive: Boolean
  supplements: [SupplementProtocolInput!]
  group: ProtocolGroup
  bundle: ID
}

input CreateSPInput {
  name: String!
  startDate: Date!
  overview: String
  nutrition: String
  exercise: String
  resources: String
  visibility: Boolean
  isActive: Boolean
  protocols: [SPProtocolInput!]
  supplements: [SingleSupplementActivableProtocolInput!]
}

input CreateSPTInput {
  name: String!
  overview: String
  nutrition: String
  exercise: String
  resources: String
  isPublic: Boolean
  protocols: [SPTProtocolInput!]
  supplements: [SingleSupplementProtocolInput!]
}

type CreateSupplementPlan {
  success: Boolean!
  message: String!
  supplementPlan: SupplementPlan
}

type CreateSupplementPlanTemplate {
  success: Boolean!
  message: String!
  template: SupplementPlanTemplate
}

type CronofyAuthRevoke {
  success: Boolean!
  message: String!
  coach: Coach
}

type CronofyAuthToken {
  success: Boolean!
  message: String!
  accessToken: String @deprecated(reason: "Not supported anymore")
}

type CronofyConferencingServiceAuth {
  success: Boolean!
  message: String!
  url: String
}

type CronofyElementToken {
  success: Boolean!
  token: String
}

type DailyChecklist {
  name: String!
  icon: String
  days: [DayChecklistItems]!
}

type DailyMoodSummary {
  question: DailyRecapQuestion
  answersStats: [AnswerCounter!]!
}

type DailyRecap {
  date: Date!
  questions: [DailyRecapQuestion!]!
}

type DailyRecapAnswer {
  type: HabitAnswerType!
  answer: String!
  selected: Boolean
  imageUrl: String
}

type DailyRecapQuestion {
  question: String
  done: Boolean
  imageUrl: String
  answers: [DailyRecapAnswer]
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DayChecklistItems {
  date: DateTime!
  items: [ChecklistItem]!
}

enum DayStatus {
  PERFECT_DAY
  REGULAR_DAY
  GOOD_DAY
  EMPTY_DAY
}

type DeleteAppointmentEvent {
  success: Boolean!
  message: String!
  event: Appointment
}

type DeleteAppointmentType {
  success: Boolean!
  message: String!
  appointmentType: AppointmentType
}

type DeleteCoachTeam {
  success: Boolean!
  message: String!
  coachTeam: CoachTeam
}

type DeleteCoachType {
  success: Boolean!
  message: String!
  coachType: CoachType
}

type DeleteLabTestReport {
  success: Boolean!
  message: String!
  report: LabTestReport
}

type DeleteMealPlanTemplate {
  success: Boolean!
  message: String!
  mealPlan: MealPlanTemplate
}

type DeleteMembersTag {
  success: Boolean!
  message: String!
  tag: MemberTag
}

input DeleteNoteInput {
  memberId: ID!
  noteId: ID!
  clientMutationId: String
}

type DeleteNotePayload {
  success: Boolean!
  message: String!
  note: Note
  clientMutationId: String
}

type DeleteNoteTemplate {
  success: Boolean!
  message: String!
  noteTemplate: NoteTemplate
}

type DeleteProtocol {
  success: Boolean!
  message: String!
  protocol: Protocol
}

type DeleteSupplementPlan {
  success: Boolean!
  message: String!
  supplementPlan: SupplementPlan
}

type DeleteSupplementPlanTemplate {
  success: Boolean!
  message: String!
  template: SupplementPlanTemplate
}

input DirectionsOfUseInput {
  quantity: Float!
  timeOfDay: TimeOfDay!
}

type DuplicateMealPlanTemplate {
  success: Boolean!
  message: String!
  mealPlan: MealPlanTemplate
}

type DuplicateProtocol {
  success: Boolean!
  message: String!
  protocol: Protocol
}

type DuplicateSupplementPlanTemplate {
  success: Boolean!
  message: String!
  template: SupplementPlanTemplate
}

enum EventParticipationStatus {
  NEEDS_ACTION
  ACCEPTED
  DECLINED
  TENTATIVE
  UNKNOWN
}

enum EventStatus {
  TENTATIVE
  CONFIRMED
  CANCELLED
  UNKNOWN
  ACCEPTED
}

enum ExerciseIntensity {
  VIGOROUS
  MODERATE
  LOW
}

type ExerciseTracker {
  id: ID!
  datetime: DateTime!
  durationMinutes: Int!
  type: ExerciseType
  intensity: ExerciseIntensity
}

type ExerciseTrackerConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ExerciseTrackerEdge]!
}

"""A Relay edge containing a `ExerciseTracker` and its cursor."""
type ExerciseTrackerEdge {
  """The item at the end of the edge"""
  node: ExerciseTracker

  """A cursor for use in pagination"""
  cursor: String!
}

enum ExerciseType {
  CARDIO
  STRENGTH
  WORKOUT_ROUTINE
  RECOVERY
  OTHER
  WALK
  CYCLE
  JOG_OR_RUN
  SWIM
  BREATHWORK
  STRETCH
  YOGA
  PILATES
  HIKE
  DANCE
  HOUSEHOLD_CHORES
  YARD_WORK
  PHYSICAL_THERAPY_EXERCISES
  IN_BED_EXERCIES
}

type ExternalCalendarEvent {
  title: String
  description: String
  start: DateTime!
  end: DateTime!
}

type ExternalCalendarEventsInDate {
  date: Date!
  events: [ExternalCalendarEvent!]!
}

type FormError {
  field: String
  messages: [String!]
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

type Generate2faUri {
  success: Boolean!
  message: String!
  uri: String
}

type GenerateMealPlan {
  success: Boolean!
  message: String
}

input GenerateVideoZoomTokenInput {
  sessionName: String!
  sessionKey: String
  role: VideoZoomRole

  """Max length 10 characters"""
  password: String

  """Max length 15 characters"""
  userIdentity: String
  clientMutationId: String
}

type GenerateVideoZoomTokenPayload {
  success: Boolean!
  message: String!
  token: String
  clientMutationId: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type GroupChannel implements Node {
  channelUrl: String!
  name: String!
  members: [String!]!
  isDistinct: Boolean!
  isActive: Boolean!
  createdBy: String
  dateCreated: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object."""
  id: ID!
}

type GroupChannelConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [GroupChannelEdge]!
}

"""A Relay edge containing a `GroupChannel` and its cursor."""
type GroupChannelEdge {
  """The item at the end of the edge"""
  node: GroupChannel

  """A cursor for use in pagination"""
  cursor: String!
}

enum GroupQuestion {
  MOOD
}

enum HabitAnswerType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

type HeartRateLog {
  id: ID!
  value: Float!
  source: String!
  timestamp: DateTime!
}

type HeartRateLogsConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [HeartRateLogsEdge]!
}

"""A Relay edge containing a `HeartRateLogs` and its cursor."""
type HeartRateLogsEdge {
  """The item at the end of the edge"""
  node: HeartRateLog

  """A cursor for use in pagination"""
  cursor: String!
}

input HistoricalBiomarkerResultsFilterInput {
  categoryId: ID
  biomarkerId: ID
  biomarkerName: String
  intervalRange: BiomarkerIntervalRange
  labTestReportId: ID
}

type HrvLog {
  id: ID!
  value: Float!
  source: String!
  timestamp: DateTime!
}

type HrvLogsConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [HrvLogsEdge]!
}

"""A Relay edge containing a `HrvLogs` and its cursor."""
type HrvLogsEdge {
  """The item at the end of the edge"""
  node: HrvLog

  """A cursor for use in pagination"""
  cursor: String!
}

enum IntakeCategory {
  FOOD
  SUPPLEMENT
  PLAN_SUPPLEMENT
}

input IntValueByMealTime {
  breakfast: Int
  dinner: Int
  lunch: Int
  snack: Int
}

input InviteCoachInput {
  email: String!
  name: String
  disabled: Boolean
  makeAdmin: Boolean
  allowSeeAll: Boolean
  members: [ID]
  enable2fa: Boolean
  coachTypes: [ID!]
  coachTeams: [ID!]
  roles: [String] = ["NON_VERIFIED_COACH", "COACH"]
  clientMutationId: String
}

type InviteCoachPayload {
  success: Boolean!
  message: String!
  coach: Coach
  clientMutationId: String
}

input InviteMemberInput {
  name: String!
  email: String!
  consent: Boolean!
  birthdate: Date
  recommendedProgram: ID
  phone: String
  message: String
  clientMutationId: String
}

type InviteMemberPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type Journey {
  id: ID!
  daysIntoProgram: Int
  title: String
  subtitle: String
}

type JourneysConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [JourneysEdge]!
}

"""A Relay edge containing a `Journeys` and its cursor."""
type JourneysEdge {
  """The item at the end of the edge"""
  node: ProfileJourney

  """A cursor for use in pagination"""
  cursor: String!
}

enum JourneyStatus {
  OPEN
  CLOSE
  FINISH
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type LabTestReport {
  id: ID!
  testName: String!
  testDate: DateTime
  labName: String!
  reportPdf: String
  title: String!
  isVisible: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderingPhysician: String
  externalId: String
  orderId: String
  sampleCollectionDate: Date
  requisitionId: String
  productId: String
  status: LabTestReportStatus
  description: String
  image: String
  alert: Boolean
  alertText: String
  alertStatus: AlertStatus
  alertAction: AlertAction
  videoUrl: String
  imageUrl: String
}

type LabTestReportConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LabTestReportEdge]!
}

"""A Relay edge containing a `LabTestReport` and its cursor."""
type LabTestReportEdge {
  """The item at the end of the edge"""
  node: LabTestReport

  """A cursor for use in pagination"""
  cursor: String!
}

enum LabTestReportStatus {
  CREATED
  ORDERED
  FULFILLED
  ERROR
  RETURNED_TO_LAB
  RESULTS_READY
  PROCESS_COMPLETE
  RESULTS_DELIVERED
}

input LinkCoachInput {
  userId: ID!
  coachId: ID!
  clientMutationId: String
}

type LinkCoachPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input LinkMemberTagInput {
  memberId: ID!
  tagId: ID!
  clientMutationId: String
}

type LinkMemberTagPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input Location {
  description: String
  lat: Float
  long: Float
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  success: Boolean!
  message: String!
  accessToken: String
  refreshToken: String
  me: Coach
  clientMutationId: String
}

type MacroNutrientGoal {
  goal: Float
  left: Float
  logged: Float
}

"""Logs when a user ate, skipped or replaced a meal in their meal plan"""
type MealLog {
  id: ID!
  date: Date!
  mealTime: MealTime!
  mainImage: String
  nutrients: Nutrients
  recipeName: String!
  status: MealLogStatus!
}

type MealLogMacroAggs {
  date: Date!

  """Fat (g)"""
  fat(toKcal: Boolean): MacroNutrientGoal!

  """Protein (g)"""
  procnt(toKcal: Boolean): MacroNutrientGoal!

  """Carbohydrate, by difference (g)"""
  chocdf(toKcal: Boolean): MacroNutrientGoal!

  """Carbohydrate, by difference (g)"""
  netcarbs(toKcal: Boolean): MacroNutrientGoal!
}

type MealLogs {
  aggregation: [MealLogMacroAggs!]!
  logs: [MealLog!]!
}

enum MealLogStatus {
  ATE
  SKIPPED
  OTHER_FOLLOWING
  OTHER_NOT_FOLLOWING
}

type MealPlanDay {
  id: ID
  date: Date
  day: Int
  calories: Float
  meals: [MealPlanMeal!]!
}

"""All the events related to meals on a meal plan logged by a member"""
type MealPlanLogs {
  date: Date!
  logs: [MealLog!]!
}

type MealPlanMeal {
  id: String!
  recipe: Recipe!
  meal: MealTime!
  numOfServings: Int!
  maxNumOfServings: Int!
  calories: Float!
}

type MealPlanTemplate implements Node {
  id: ID!
  name: String!
  description: String!
  isPublic: Boolean!
  createdAt: DateTime!
  days: [MealPlanDay!]!
  authorName: String!
  coachTypes(before: String, after: String, first: Int, last: Int): CoachTypeConnection
}

enum MealTime {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

"""This is a client linked to a coach"""
type Member implements Node {
  """The ID of the object."""
  id: ID!
  email: String!
  name: String!
  phone: String
  birthdate: Date
  avatar: String
  memberSince: Date!
  biologicalSex: BiologicalSex
  weight: Float
  height: Float
  startingWeight: Float
  goalWeight: Float
  activityLevel: ActivityLevel
  weeklyWeightGoal: WeeklyWeightGoal
  goalsOn: Boolean!
  mpDailyCalories: Int
  mpDailyCarbsPerc: Float
  mpDailyProteinPerc: Float
  mpDailyFatPerc: Float
  lastLogin: DateTime
  program: Program
  restrictions: [Restriction!]!
  sendbirdToken: String @deprecated(reason: "Renamed. Use sendbirdId instead")
  sendbirdId: String
  dailyRecaps(startDate: Date!, endDate: Date!, group: GroupQuestion): [DailyRecap!]!
  dailyMoodSummary(startDate: Date!, endDate: Date!): DailyMoodSummary!
  activityStreaks(startDate: Date!, endDate: Date!): [ActivityStreak!]!
  waterIntake(startDate: Date!, endDate: Date!, source: SourceType): [WaterLog!]!
  mealLogs(startDate: Date!, endDate: Date!): MealLogs!
  mealPlanLogs(startDate: Date!, endDate: Date!): [MealPlanLogs!]!
  weightLogs(startDate: Date!, endDate: Date!, source: SourceType): WeightLogs!
  stepsCounter(start: DateTime!, end: DateTime!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): StepsCounterConnection!
  exerciseTracker(start: DateTime!, end: DateTime!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): ExerciseTrackerConnection!
  currentJourneys(before: String, after: String, first: Int, last: Int): JourneysConnection!
  notes(eventId: ID, before: String, after: String, first: Int, last: Int): NoteConnection
  mealPlan(startDate: Date): [MealPlanDay]
  checkedIntakes(startDate: Date!, endDate: Date!, intakeCategory: IntakeCategory!): DailyChecklist
  labTestReports(id: ID, isVisible: Boolean, before: String, after: String, first: Int, last: Int): LabTestReportConnection!
  credits: [AppointmentCredit]!
  hasEverLoggedIn: Boolean
  appointmentsByDate(timezone: String!, fromDate: Date, toDate: Date): [AppointmentsInDate!]
  subscription: Subscription
  quizAnswers: [QuizAnswer!]!
  customAttributes: JSONString!
  supplementPlans(id: ID, offset: Int, before: String, after: String, first: Int, last: Int): SupplementPlanConnection
  coaches: [Coach!]!
  tags: [MemberTag!]!
  sleepTimes(start: Date!, end: Date!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): SleepTimesConnection!
  sleepQualityScores(start: Date!, end: Date!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): SleepQualityScoresConnection!
  hrvLogs(start: DateTime!, end: DateTime!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): HrvLogsConnection
  heartRateLogs(start: DateTime!, end: DateTime!, id: ID, source: SourceType, before: String, after: String, first: Int, last: Int): HeartRateLogsConnection
  timezone: String!
  connectedSources: [ConnectedSource!]!
  appVersion: String
}

type MemberConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MemberEdge]!
}

"""A Relay edge containing a `Member` and its cursor."""
type MemberEdge {
  """The item at the end of the edge"""
  node: Member

  """A cursor for use in pagination"""
  cursor: String!
}

input MemberResetPasswordInput {
  code: String!
  newPassword: String!
  clientMutationId: String
}

type MemberResetPasswordPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type MemberSearch {
  id: ID!
  email: String!
  name: String
  birthdate: String
  thirdPartyId: Int!
  avatar: String
}

type MemberSearchConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MemberSearchEdge]!
  count: Int
}

"""A Relay edge containing a `MemberSearch` and its cursor."""
type MemberSearchEdge {
  """The item at the end of the edge"""
  node: MemberSearch

  """A cursor for use in pagination"""
  cursor: String!
}

input MemberSearchFilters {
  name: String
  email: String
  birthdate: Date
  hasSendbirdId: Boolean
  sendBirdIds: [String!]
  isClient: Boolean
  tagIds: [ID!]
}

type MemberTag implements Node {
  tag: String!
  color: String
  id: ID!
}

type MemberTagConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MemberTagEdge]!
}

"""A Relay edge containing a `MemberTag` and its cursor."""
type MemberTagEdge {
  """The item at the end of the edge"""
  node: MemberTag

  """A cursor for use in pagination"""
  cursor: String!
}

type MPTConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MPTEdge]!
}

input MPTCustomOptionsInput {
  program: ID
  calories: Int

  """Percentage between 0 and 100"""
  fatPerc: Int

  """Percentage between 0 and 100"""
  carbsPerc: Int

  """Percentage between 0 and 100"""
  proteinPerc: Int
  format: [MealTime!]
}

"""A Relay edge containing a `MPT` and its cursor."""
type MPTEdge {
  """The item at the end of the edge"""
  node: MealPlanTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input MPTFromDaysInput {
  memberId: ID!
  fromDate: Date!
  toDate: Date!
}

input MPTFromScratchDayInput {
  meals: [MPTFromScratchMealInput!]!
}

input MPTFromScratchInput {
  days: [MPTFromScratchDayInput!]!
}

input MPTFromScratchMealInput {
  recipeId: ID!
  mealType: MealTime!
  servings: Int
}

"""Root GraphQL mutation type"""
type Mutation {
  login(input: LoginInput!): LoginPayload
  updateSettings(input: UpdateSettingsInput!): UpdateSettingsPayload
  linkCoach(input: LinkCoachInput!): LinkCoachPayload
  unlinkCoach(input: UnlinkCoachInput!): UnlinkCoachPayload
  resendInviteMemberEmail(input: ResendInviteMemberEmailInput!): ResendInviteMemberEmailPayload
  inviteMember(input: InviteMemberInput!): InviteMemberPayload
  inviteCoach(input: InviteCoachInput!): InviteCoachPayload
  resendInviteCoach(input: ResendInviteCoachInput!): ResendInviteCoachPayload
  requestMemberResetPassword(input: RequestMemberResetPasswordInput!): RequestMemberResetPasswordPayload
  requestCoachResetPassword(input: RequestCoachResetPasswordInput!): RequestCoachResetPasswordPayload
  memberResetPassword(input: MemberResetPasswordInput!): MemberResetPasswordPayload
  coachResetPassword(input: CoachResetPasswordInput!): CoachResetPasswordPayload
  coachUpdate(input: CoachUpdateInput!): CoachUpdatePayload
  coachDelete(input: CoachDeleteInput!): CoachDeletePayload
  coachUpdateAvatar(input: CoachUpdateAvatarInput!): CoachUpdateAvatarPayload

  """Set coach role to INACTIVE_COACH (no permissions)"""
  coachDisable(input: CoachDisableInput!): CoachDisablePayload

  """Set coach role to COACH_ADMIN"""
  coachMakeAdmin(input: CoachMakeAdminInput!): CoachMakeAdminPayload

  """Se coach role to a "can see all" coach who can list all owned members"""
  coachAllowSeeAll(input: CoachAllowSeeAllInput!): CoachAllowSeeAllPayload
  updateMemberFields(input: UpdateMemberFieldsInput!): UpdateMemberFieldsPayload
  updateMemberProgram(input: UpdateMemberProgramInput!): UpdateMemberProgramPayload
  updateMemberRestrictions(input: UpdateMemberRestrictionsInput!): UpdateMemberRestrictionsPayload
  updateMemberPassword(input: UpdateMemberPasswordInput!): UpdateMemberPasswordPayload
  noteCreate(input: CreateNoteInput!): CreateNotePayload
  noteUpdate(input: UpdateNoteInput!): UpdateNotePayload
  noteDelete(input: DeleteNoteInput!): DeleteNotePayload
  swapMealPlanRecipe(input: SwapMealPlanRecipeInput!): SwapMealPlanRecipePayload
  createMealPlanTemplate(coach: ID, customOptions: MPTCustomOptionsInput, description: String!, fromDays: MPTFromDaysInput, fromScratch: MPTFromScratchInput, name: String!): CreateMealPlanTemplate
  updateMealPlanTemplate(coachTypes: [ID!], description: String, id: ID!, isPublic: Boolean, mealPlanDays: MPTFromScratchInput, name: String): UpdateMealPlanTemplate
  duplicateMealPlanTemplate(id: ID!): DuplicateMealPlanTemplate
  deleteMealPlanTemplate(id: ID!): DeleteMealPlanTemplate
  setMealPlanTemplate(memberId: ID!, templateId: ID!): SetMealPlanToTemplate
  generateMealPlan(input: CreateMealPlanInput!, memberId: ID!): GenerateMealPlan
  startJourneys(daysUnlocked: Int!, memberId: ID!): StartJourneys
  updateJourneyStatus(journeyId: String!, memberId: ID!, status: JourneyStatus!): UpdateJourneyStatus
  generate2faUri(email: String!): Generate2faUri
  verify2faCode(code: String!, email: String!): Verify2faCode
  deleteLabTestReport(id: ID!, memberId: ID!): DeleteLabTestReport
  createLabTestReport(alert: Boolean, alertAction: AlertAction, alertStatus: AlertStatus, alertText: String, description: String, externalId: String, image: Upload, imageUrl: String, isVisible: Boolean, labName: String!, memberId: ID!, orderId: String, orderingPhysician: String, productId: String, reportPdf: Upload, requisitionId: String, sampleCollectionDate: Date, status: LabTestReportStatus, testDate: DateTime, testName: String!, title: String!, videoUrl: String): CreateLabTestReport
  updateLabTestReport(alert: Boolean, alertAction: AlertAction, alertStatus: AlertStatus, alertText: String, description: String, externalId: String, id: ID!, image: Upload, imageUrl: String, isVisible: Boolean, labName: String, memberId: ID!, orderId: String, orderingPhysician: String, productId: String, reportPdf: Upload, requisitionId: String, sampleCollectionDate: Date, status: LabTestReportStatus, testDate: DateTime, testName: String, title: String, videoUrl: String): UpdateLabTestReport
  cronofyAuthRevoke: CronofyAuthRevoke
  cronofyAuthToken(code: String!, redirectUri: String!): CronofyAuthToken
  cronofyElementToken(permissions: [String]!): CronofyElementToken
  cronofyConferencingServiceAuth(providerName: ConferenceProviderName, redirectUri: String!): CronofyConferencingServiceAuth
  createAppointmentType(coaches: [ID!], contactType: [CalendarContactType!], durationMin: Int!, initialBuffer: Int, multiCoachType: AppointmentMultiCoachType, numberOfMember: Int!, refundableBeforeHours: Int, title: String!): CreateAppointmentType
  updateAppointmentType(coaches: [ID!], contactType: [CalendarContactType!], durationMin: Int, id: ID!, initialBuffer: Int, multiCoachType: AppointmentMultiCoachType, numberOfMember: Int, refundableBeforeHours: Int, title: String): UpdateAppointmentType
  deleteAppointmentType(id: ID!, replaceWith: ID): DeleteAppointmentType
  createAppointmentEvent(input: CreateAppointmentEventInput!): CreateAppointmentEvent
  deleteAppointmentEvent(id: ID!): DeleteAppointmentEvent
  updateAppointmentEvent(input: UpdateAppointmentEventInput!): UpdateAppointmentEvent
  createNoteTemplate(text: String!, title: String!): CreateNoteTemplate
  updateNoteTemplate(id: ID!, text: String, title: String): UpdateNoteTemplate
  deleteNoteTemplate(id: ID!): DeleteNoteTemplate
  addAppointmentCredits(appointmentType: ID!, decrease: Int, increase: Int, member: ID!, value: Int): AddAppointmentCredits
  setAppointmentSettings(
    """Set of reminders in hours before start"""
    emailReminders: [Int!]

    """Set of reminders in hours before start"""
    pushReminders: [Int!]
    sendInitialNoticeEmail: Boolean
  ): SetAppointmentSettings
  setCoachAutoResponse(autoResponse: String): SetCoachAutoResponse
  updateSubscription(memberId: ID!, subscriptionId: ID!): UpdateSubscription
  createProtocol(input: CreateProtocolInput!): CreateProtocol
  updateProtocol(input: UpdateProtocolInput!): UpdateProtocol
  deleteProtocol(id: ID!): DeleteProtocol
  duplicateProtocol(id: ID!): DuplicateProtocol
  createSupplementPlanTemplate(input: CreateSPTInput!): CreateSupplementPlanTemplate
  updateSupplementPlanTemplate(input: UpdateSPTInput!): UpdateSupplementPlanTemplate
  deleteSupplementPlanTemplate(id: ID!): DeleteSupplementPlanTemplate
  duplicateSupplementPlanTemplate(id: ID!): DuplicateSupplementPlanTemplate
  createSupplementPlan(fromTemplate: ID, input: CreateSPInput, memberId: ID!): CreateSupplementPlan
  deleteSupplementPlan(id: ID!): DeleteSupplementPlan
  updateSupplementPlan(input: UpdateSPInput!): UpdateSupplementPlan
  createMembersTag(input: CreateMemberTagInput!): CreateMembersTag
  updateMembersTag(input: UpdateMemberTagInput!): UpdateMembersTag
  deleteMembersTag(id: ID!): DeleteMembersTag
  linkMemberTag(input: LinkMemberTagInput!): LinkMemberTagPayload
  unlinkMemberTag(input: UnlinkMemberTagInput!): UnlinkMemberTagPayload
  setUISettings(input: SetUISettingsInput!): SetUISettings
  createGroupChannel(input: CreateGroupChannelInput!): CreateGroupChannel
  generateVideoZoomToken(input: GenerateVideoZoomTokenInput!): GenerateVideoZoomTokenPayload
  setPrimaryCoach(input: SetPrimaryCoachInput!): SetPrimaryCoachPayload
  addBiomarkerResults(input: AddBiomarkerResultsInput!): AddBiomarkerResults
  addBiomarker(input: AddBiomarkerInput!): AddBiomarker
  createCoachType(input: CreateCoachTypeInput!): CreateCoachTypePayload
  updateCoachType(input: UpdateCoachTypeInput!): UpdateCoachTypePayload
  deleteCoachType(id: ID!): DeleteCoachType
  createCoachTeam(input: CreateCoachTeamInput!): CreateCoachTeamPayload
  updateCoachTeam(input: UpdateCoachTeamInput!): UpdateCoachTeamPayload
  deleteCoachTeam(id: ID!): DeleteCoachTeam
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type Note {
  id: ID!
  title: String
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Coach
  updatedBy: Coach
}

type NoteConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NoteEdge]!
}

"""A Relay edge containing a `Note` and its cursor."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type NoteTemplate {
  id: ID!
  title: String
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Coach
  updatedBy: Coach
}

type NoteTemplateConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NoteTemplateEdge]!
}

"""A Relay edge containing a `NoteTemplate` and its cursor."""
type NoteTemplateEdge {
  """The item at the end of the edge"""
  node: NoteTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

type Nutrients {
  """Calories (kcal)"""
  calories: Float

  """Sugar (g)"""
  sugar: Float

  """Dietary Fiber (g)"""
  fibtg: Float
  dha: Float
  dpa: Float
  epa: Float
  ala: Float
  saturatedFat: Float
  monounsaturatedFat: Float
  polyunsaturatedFat: Float
  transFat: Float
  cholesterol: Float
  sodium: Float
  potassium: Float
  vitaminA: Float
  vitaminC: Float
  vitaminB6: Float
  vitaminB12: Float
  vitaminD: Float
  vitaminE: Float
  calcium: Float
  iron: Float
  vitaminK: Float
  vitaminB1: Float
  vitaminB2: Float
  vitaminB3: Float
  vitaminB5: Float
  vitaminB7: Float
  vitaminB9: Float
  magnesium: Float
  zinc: Float
  selenium: Float
  phosphorus: Float
  choline: Float
  copper: Float
  manganese: Float
  molybdenum: Float
  iodine: Float
  omega3: Float

  """Carbohydrate, by difference (g)"""
  netcarbs(toKcal: Boolean): Float

  """Fat (g)"""
  fat(toKcal: Boolean): Float

  """Protein (g)"""
  procnt(toKcal: Boolean): Float

  """Carbohydrate, by difference (g)"""
  chocdf(toKcal: Boolean): Float
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ProfileBiomarker implements Node {
  date: DateTime!
  alert: Boolean
  alertText: String
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object."""
  id: ID!
  value: GenericScalar!
  biomarker: Biomarker!
  labTestReport: LabTestReport!
  biomarkerUnit: BiomarkerUnit
}

type ProfileBiomarkerConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProfileBiomarkerEdge]!
}

"""A Relay edge containing a `ProfileBiomarker` and its cursor."""
type ProfileBiomarkerEdge {
  """The item at the end of the edge"""
  node: ProfileBiomarker

  """A cursor for use in pagination"""
  cursor: String!
}

type ProfileBiomarkerResult {
  biomarker: Biomarker!
  results(start: Date, end: Date, offset: Int, before: String, after: String, first: Int, last: Int): ProfileBiomarkerConnection
  articles(before: String, after: String, first: Int, last: Int): ContentLibraryConnection
  supplements(offset: Int, before: String, after: String, first: Int, last: Int): SupplementConnection
}

type ProfileJourney {
  id: ID!
  status: JourneyStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  journey: Journey!
}

type Program {
  id: ID!
  name: String!
  slug: String!
  author: String
  image: String
  cover: String
  backgroundImage: String
  descriptionShort: String
  descriptionLong: String
  restrictions: [Restriction]!
}

type ProgramConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProgramEdge]!
}

"""A Relay edge containing a `Program` and its cursor."""
type ProgramEdge {
  """The item at the end of the edge"""
  node: Program

  """A cursor for use in pagination"""
  cursor: String!
}

type Protocol implements Node {
  name: String!
  length: Int!
  isPublic: Boolean!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  group: ProtocolGroup!
  program: Program
  supplementProtocols: [SupplementProtocol!]
  bundle: Supplement
  owner: Coach
  coachTypes(before: String, after: String, first: Int, last: Int): CoachTypeConnection
}

type ProtocolConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProtocolEdge]!
}

"""A Relay edge containing a `Protocol` and its cursor."""
type ProtocolEdge {
  """The item at the end of the edge"""
  node: Protocol

  """A cursor for use in pagination"""
  cursor: String!
}

enum ProtocolGroup {
  PROTOCOL
  SINGLE_SUPPLEMENT
}

"""Root GraphQL query type"""
type Query {
  me: Coach
  sectionsConfig: UISections!

  """The ID of the object"""
  coach(id: ID!): Coach
  coaches(sendbirdHasEverLoggedIn: Boolean, ids: [ID!], filters: CoachFiltersInput, offset: Int, before: String, after: String, first: Int, last: Int): CoachConnection
  programs(before: String, after: String, first: Int, last: Int): ProgramConnection

  """The ID of the object"""
  member(id: ID!): Member
  members(filters: MemberSearchFilters, before: String, after: String, first: Int, last: Int): MemberConnection
  restrictions(before: String, after: String, first: Int, last: Int): RestrictionConnection
  recipeSearch(query: String, before: String, after: String, first: Int, last: Int): RecipeConnection
  recommendedSwaps(mealTime: MealTime!, memberId: ID): RecommendedSwaps

  """The ID of the object"""
  mealPlanTemplate(id: ID!): MealPlanTemplate
  mealPlanTemplates(newerFirst: Boolean, isOwned: Boolean, search: String, coachTypes: [ID!], before: String, after: String, first: Int, last: Int): MPTConnection
  appointmentTypes: AppointmentTypes!
  noteTemplates(before: String, after: String, first: Int, last: Int): NoteTemplateConnection
  appointmentsByDate(fromDate: Date, toDate: Date, timezone: String, coachIds: [ID!]): [AppointmentsInDate!]!
  appointmentSettings: AppointmentSettings!
  subscriptions(before: String, after: String, first: Int, last: Int): SubscriptionConnection
  protocols: AvailableProtocols
  supplementPlanTemplates: AvailableSupplementPlanTemplates
  supplements(id: ID, name: String, offset: Int, before: String, after: String, first: Int, last: Int): SupplementConnection
  memberTags(id: ID, offset: Int, before: String, after: String, first: Int, last: Int): MemberTagConnection
  uiSettings(slug: String): UISettings
  coachActivitiesLogs(filters: CoachActivityLogFiltersInput, offset: Int, before: String, after: String, first: Int, last: Int): ActivityLogConnection
  appUserActivities(start: DateTime, end: DateTime, filters: AppUserActivityLogFiltersInput, offset: Int, before: String, after: String, first: Int, last: Int): ActivityLogConnection
  biomarkerCatalog(id: ID, filters: BiomarkerFilterInput, before: String, after: String, first: Int, last: Int): BiomarkerConnection
  biomarkers(id: ID, filters: BiomarkerFilterInput, before: String, after: String, first: Int, last: Int): BiomarkerConnection
  biomarkerCategories(id: ID, parentId: ID, offset: Int, before: String, after: String, first: Int, last: Int): BiomarkerCategoryConnection
  biomarkerUnits(offset: Int, before: String, after: String, first: Int, last: Int, id: Float): BiomarkerUnitConnection
  biomarkerResults(memberId: ID!, filters: BiomarkerResultsFilterInput): [ProfileBiomarker!]
  historicalBiomarkerResults(memberId: ID!, filters: HistoricalBiomarkerResultsFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): ProfileBiomarkerConnection
  historicalResultsByBiomarker(
    memberId: ID!

    """Biomarker ID"""
    id: ID!
  ): ProfileBiomarkerResult
  groupChannels(memberIds: [ID!]!, isActive: Boolean = true, offset: Int, before: String, after: String, first: Int, last: Int): GroupChannelConnection
  coachTypes(id: ID, filters: CoachTypesFilterInput, before: String, after: String, first: Int, last: Int): CoachTypeConnection
  coachTeams(id: ID, filters: CoachTeamsFilterInput, before: String, after: String, first: Int, last: Int): CoachTeamConnection
  memberSearch(
    """Query search term"""
    query: String
    before: String
    after: String
    first: Int
    last: Int
  ): MemberSearchConnection
}

type QuizAnswer {
  id: ID!
  answer: String!
  question: String!
  timestamp: DateTime!
  questionImage: String
  answerImage: String
}

type Recipe {
  id: ID!
  name: String!
  numOfServing: Int
  isActive: Boolean!
  mainImage: String!
  author: String!
  mealTimes: [MealTime]!
  serving: Int!
  nutrients: Nutrients
  instructions: [String!]
  ingredientLines: [String!]!
  ingredientsCount: Int
  totalTime: String
  totalTimeInSeconds: Int
}

type RecipeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RecipeEdge]!
}

"""A Relay edge containing a `Recipe` and its cursor."""
type RecipeEdge {
  """The item at the end of the edge"""
  node: Recipe

  """A cursor for use in pagination"""
  cursor: String!
}

type RecommendedSwaps {
  meals: [Recipe]
  recipes: [Recipe]
}

input RequestCoachResetPasswordInput {
  email: String!
  clientMutationId: String
}

type RequestCoachResetPasswordPayload {
  coach: Coach
  success: Boolean!
  message: String!
  clientMutationId: String
}

input RequestMemberResetPasswordInput {
  memberId: ID!
  clientMutationId: String
}

type RequestMemberResetPasswordPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input ResendInviteCoachInput {
  email: String!
  clientMutationId: String
}

type ResendInviteCoachPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input ResendInviteMemberEmailInput {
  email: String!
  message: String
  clientMutationId: String
}

type ResendInviteMemberEmailPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type Restriction {
  id: ID!
  name: String!
  slug: String!
  subcategory: String
  isOnProgram: Boolean!
}

type RestrictionConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RestrictionEdge]!
}

"""A Relay edge containing a `Restriction` and its cursor."""
type RestrictionEdge {
  """The item at the end of the edge"""
  node: Restriction

  """A cursor for use in pagination"""
  cursor: String!
}

type SetAppointmentSettings {
  success: Boolean!
  message: String!
  appointmentSettings: AppointmentSettings!
}

type SetCoachAutoResponse {
  success: Boolean!
  message: String!
}

type SetMealPlanToTemplate {
  success: Boolean!
  message: String!
}

input SetPrimaryCoachInput {
  memberId: ID!
  coachId: ID!
  clientMutationId: String
}

type SetPrimaryCoachPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

"""Available account settings for coaches"""
type Settings {
  name: String
  availabilitySettings: AvailabilitySettings
  unitSystem: UnitSystem!
  weeklyRules: [WeeklyRules!]
  showAllMembers: Boolean!
}

type SetUISettings {
  success: Boolean!
  message: String!
  setting: UISettings
}

input SetUISettingsInput {
  icon: Upload
  logo: Upload
  baseColor1: String
  baseColor2: String
  primaryColor: String
  secondaryColor: String
}

input SingleSupplementActivableProtocolInput {
  supplementId: ID!
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  directionsOfUse: [DirectionsOfUseInput!]
  length: Int!
  isActive: Boolean
}

input SingleSupplementProtocolInput {
  supplementId: ID!
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  directionsOfUse: [DirectionsOfUseInput!]
  length: Int!
}

type SleepQualityScore {
  id: ID!
  value: Int!
  source: String!
  date: Date!
}

type SleepQualityScoresConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SleepQualityScoresEdge]!
}

"""A Relay edge containing a `SleepQualityScores` and its cursor."""
type SleepQualityScoresEdge {
  """The item at the end of the edge"""
  node: SleepQualityScore

  """A cursor for use in pagination"""
  cursor: String!
}

type SleepTime {
  id: ID!
  value: Int!
  source: String!
  date: Date!
}

type SleepTimesConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SleepTimesEdge]!
}

"""A Relay edge containing a `SleepTimes` and its cursor."""
type SleepTimesEdge {
  """The item at the end of the edge"""
  node: SleepTime

  """A cursor for use in pagination"""
  cursor: String!
}

enum SourceType {
  SUGGESTIC
  FITBIT
  GARMIN
  POLAR
  MISFIT
  WITHINGS
  STRAVA
  GOOGLEFIT_REST
  GOOGLEFIT_NATIVE
  SUUNTO
  OURA
  IHEALTH
  APPLE
  SAMSUNG
  OMRONCONNECT
  OMRONWELLNESS
  HUAWEIHEALTH
}

input SPProtocolInput {
  protocolId: ID!
  isActive: Boolean
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  directionsOfUse: [DirectionsOfUseInput!]!
}

input SPTProtocolInput {
  protocolId: ID!
  directionsOfUse: [DirectionsOfUseInput!]
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
}

input SPUpdateProtocolInput {
  protocolId: ID!
  isActive: Boolean
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  directionsOfUse: [DirectionsOfUseInput!]
}

type StartJourneys {
  message: String
  success: Boolean
}

type StepsCount {
  id: ID!
  steps: Int!
  datetime: DateTime!
}

type StepsCounterConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StepsCounterEdge]!
}

"""A Relay edge containing a `StepsCounter` and its cursor."""
type StepsCounterEdge {
  """The item at the end of the edge"""
  node: StepsCount

  """A cursor for use in pagination"""
  cursor: String!
}

type Subscription {
  id: ID!
  appleId: String
  billingPeriod: SubscriptionBillingPeriod
  duration: SubscriptionDuration
  googleplaySku: String
  isActive: Boolean!
  isRecurring: Boolean!
  name: String!
  periodPrice: Int!
  permissions: [String]!
  totalPrice: Int!
  trialPeriodDays: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

enum SubscriptionBillingPeriod {
  MONTH
  ONCE
  TRI_MONTH
  YEAR
}

type SubscriptionConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubscriptionEdge]!
}

enum SubscriptionDuration {
  FOREVER
  MONTH
  TRI_MONTH
  YEAR
}

"""A Relay edge containing a `Subscription` and its cursor."""
type SubscriptionEdge {
  """The item at the end of the edge"""
  node: Subscription

  """A cursor for use in pagination"""
  cursor: String!
}

type Supplement implements Node {
  id: ID!
  name: String!
  description: String
  category: String!
  mainImage: String!
  images: [String!]
  brand: String!
  directionsOfUse: [SupplementDirection!]!
  directionsOfUseText: String
  servingName: String!
  sizeCount: Int!
  externalId: String
  sku: String
  storeId: String
  shopifyVariantId: String
  shopifyParentId: String
  instructions: String
  ingredients: String
  supplementFacts: String
  createdAt: DateTime!
  updatedAt: DateTime!
  protocolBundle(offset: Int, before: String, after: String, first: Int, last: Int): ProtocolConnection!
}

type SupplementConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SupplementEdge]!
}

type SupplementDirection {
  id: ID!
  quantity: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  supplementplanprotocolSet: [SupplementPlanProtocol!]!
  timeOfDay: TimeOfDay!
}

"""A Relay edge containing a `Supplement` and its cursor."""
type SupplementEdge {
  """The item at the end of the edge"""
  node: Supplement

  """A cursor for use in pagination"""
  cursor: String!
}

type SupplementPlan implements Node {
  name: String!
  overview: String
  nutrition: String
  exercise: String
  resources: String
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: Date!
  isActive: Boolean!
  visibility: Boolean!
  id: ID!
  protocols(group: ProtocolGroup): [SupplementPlanProtocol!]!
}

type SupplementPlanConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SupplementPlanEdge]!
}

"""A Relay edge containing a `SupplementPlan` and its cursor."""
type SupplementPlanEdge {
  """The item at the end of the edge"""
  node: SupplementPlan

  """A cursor for use in pagination"""
  cursor: String!
}

type SupplementPlanProtocol {
  order: Int!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  protocol: Protocol!
  directionsOfUse: [SupplementDirection!]!
  startsAt: DateTime
  endsAt: DateTime
}

type SupplementPlanTemplate implements Node {
  name: String!
  overview: String
  nutrition: String
  exercise: String
  resources: String
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublic: Boolean!
  id: ID!
  protocols(group: ProtocolGroup): [SupplementPlanTemplateProtocol!]!
  owner: Coach
  coachTypes(before: String, after: String, first: Int, last: Int): CoachTypeConnection
}

type SupplementPlanTemplateConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SupplementPlanTemplateEdge]!
}

"""A Relay edge containing a `SupplementPlanTemplate` and its cursor."""
type SupplementPlanTemplateEdge {
  """The item at the end of the edge"""
  node: SupplementPlanTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

type SupplementPlanTemplateProtocol {
  id: ID!
  order: Int!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  protocol: Protocol!
  directionsOfUse: [SupplementDirection!]!
}

type SupplementProtocol {
  id: ID!
  supplement: Supplement!
  directionsOfUse: [SupplementDirection!]!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
}

input SupplementProtocolInput {
  supplementId: ID!
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  directionsOfUse: [DirectionsOfUseInput!]
}

input SwapMealPlanRecipeInput {
  memberId: ID!
  recipeId: ID!
  mealId: ID
  mealTime: MealTime
  serving: Int
  clientMutationId: String
}

type SwapMealPlanRecipePayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

enum TimeOfDay {
  AT_WAKING
  WITH_BREAKFAST
  WITH_LUNCH
  WITH_DINNER
  AT_BEDTIME
}

type UISections {
  menuMembers: Boolean!
  menuMealPlans: Boolean!
  menuSupplements: Boolean!
  menuAppointments: Boolean!
  menuChat: Boolean!
  memberLabs: Boolean!
  memberLabTestReports: Boolean!
  memberProgress: Boolean!
  memberMealPlan: Boolean!
  memberNotes: Boolean!
  memberNewMember: Boolean!
  memberCustomData: Boolean!
  memberSupplements: Boolean!
  memberAppointments: Boolean!
  memberChat: Boolean!
  progressActivities: Boolean!
  progressCalendar: Boolean!
  progressMeals: Boolean!
  progressMacros: Boolean!
  progressRecap: Boolean!
  progressWater: Boolean!
  progressWeight: Boolean!
  progressProgram: Boolean!
  progressDailyFoods: Boolean!
  progressDailySupplements: Boolean!
  progressSteps: Boolean!
  progressExercise: Boolean!
  progressHeartRate: Boolean!
  progressHeartRateVariability: Boolean!
  progressSleep: Boolean!
  profileGoals: Boolean!
  profileFoodPreferences: Boolean!
  profileAppointmentCredits: Boolean!
  profileCustomMacros: Boolean!
  profilePassword: Boolean!
}

type UISettings implements Node {
  baseColor1: String
  baseColor2: String
  primaryColor: String
  secondaryColor: String
  id: ID!
  logo: String
  icon: String
}

"""Available values for the unit_system setting"""
enum UnitSystem {
  METRIC
  IMPERIAL
}

input UnlinkCoachInput {
  userId: ID!
  coachId: ID!
  clientMutationId: String
}

type UnlinkCoachPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input UnlinkMemberTagInput {
  memberId: ID!
  tagId: ID!
  clientMutationId: String
}

type UnlinkMemberTagPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type UpdateAppointmentEvent {
  success: Boolean!
  message: String!
  event: Appointment
}

input UpdateAppointmentEventInput {
  id: ID!
  appointmentTypeId: ID
  timezone: String
  start: DateTime
  description: String
  url: String
  location: Location
  attendees: [ID!]
  allowFree: Boolean
  contactType: CalendarContactType
  recurring: AppointmentFrequencyInput
}

type UpdateAppointmentType {
  success: Boolean!
  message: String!
  appointmentType: AppointmentType
}

input UpdateCoachTeamInput {
  id: ID!
  name: String
  description: String
  coaches: [ID!]
  clientMutationId: String
}

type UpdateCoachTeamPayload {
  success: Boolean!
  message: String!
  errors: [FormError!]
  coachTeam: CoachTeam
  clientMutationId: String
}

input UpdateCoachTypeInput {
  id: ID!
  name: String
  description: String
  coaches: [ID!]
  clientMutationId: String
}

type UpdateCoachTypePayload {
  success: Boolean!
  message: String!
  errors: [FormError!]
  coachType: CoachType
  clientMutationId: String
}

type UpdateJourneyStatus {
  success: Boolean
  message: String
}

type UpdateLabTestReport {
  success: Boolean!
  message: String!
  report: LabTestReport
}

type UpdateMealPlanTemplate {
  success: Boolean!
  message: String!
  mealPlan: MealPlanTemplate
}

input UpdateMemberFieldsInput {
  memberId: ID!
  goals: UserGoals
  userInfo: UserInfo
  mealPlanSettings: UserMealPlanSettings
  phone: String
  timezone: String
  clientMutationId: String
}

type UpdateMemberFieldsPayload {
  success: Boolean!
  message: String!
  errors: [FormError!]
  clientMutationId: String
}

input UpdateMemberPasswordInput {
  memberId: ID!
  newPassword: String!
  clientMutationId: String
}

type UpdateMemberPasswordPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input UpdateMemberProgramInput {
  memberId: ID!
  programId: ID!
  clientMutationId: String
}

type UpdateMemberProgramPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

input UpdateMemberRestrictionsInput {
  memberId: ID!

  """List of restritions to be added to a user profile"""
  restrictions: [ID]
  clientMutationId: String
}

type UpdateMemberRestrictionsPayload {
  success: Boolean!
  message: String!
  clientMutationId: String
}

type UpdateMembersTag {
  success: Boolean!
  message: String!
  tag: MemberTag
}

input UpdateMemberTagInput {
  id: ID!
  tag: String
  color: String
}

input UpdateNoteInput {
  memberId: ID!
  noteId: ID!
  title: String
  text: String
  clientMutationId: String
}

type UpdateNotePayload {
  success: Boolean!
  message: String!
  note: Note
  errors: [FormError!]
  clientMutationId: String
}

type UpdateNoteTemplate {
  success: Boolean!
  message: String!
  noteTemplate: NoteTemplate
}

input UpdatePasswordInput {
  new: String!
  old: String!
}

type UpdateProtocol {
  success: Boolean!
  message: String!
  protocol: Protocol
}

input UpdateProtocolInput {
  id: ID!
  name: String
  length: Int
  programId: ID
  isPublic: Boolean
  isActive: Boolean
  supplements: [SupplementProtocolInput!]
  bundle: ID
  group: ProtocolGroup
  coachTypes: [ID!]
}

input UpdateSettingsInput {
  unitSystem: UnitSystem
  name: String
  password: UpdatePasswordInput
  availabilitySettings: AvailabilitySettingsInput
  affiliateId: String
  showAllMembers: Boolean = false
  clientMutationId: String
}

type UpdateSettingsPayload {
  success: Boolean!
  message: String!
  settings: Settings
  clientMutationId: String
}

input UpdateSPInput {
  id: ID!
  name: String
  startDate: Date
  overview: String
  nutrition: String
  exercise: String
  resources: String
  visibility: Boolean
  isActive: Boolean
  setProtocols: [SPProtocolInput!]
  setSupplements: [SingleSupplementActivableProtocolInput!]
  updateProtocols: [SPUpdateProtocolInput!]
}

input UpdateSPTInput {
  id: ID!
  name: String
  overview: String
  nutrition: String
  exercise: String
  resources: String
  isPublic: Boolean
  protocols: [SPTProtocolInput!]
  supplements: [SingleSupplementProtocolInput!]
  coachTypes: [ID!]
}

type UpdateSubscription {
  success: Boolean!
  message: String
}

type UpdateSupplementPlan {
  success: Boolean!
  message: String!
  supplementPlan: SupplementPlan
}

type UpdateSupplementPlanTemplate {
  success: Boolean!
  message: String!
  template: SupplementPlanTemplate
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
https://github.com/lmcgartland/graphene-file-upload/blob/master/graphene_file_upload/scalars.py
"""
scalar Upload

"""User's goals"""
input UserGoals {
  biologicalSex: BiologicalSex!
  height: Float!
  startingWeight: Float!
  targetWeight: Float!
  activityLevel: ActivityLevel!
  weeklyWeightGoal: WeeklyWeightGoal!
  goalsOn: Boolean!
}

"""User's basic information"""
input UserInfo {
  name: String
  birthdate: Date
  email: String
}

"""User's meal plan settings"""
input UserMealPlanSettings {
  calories: Int!
  carbs: Float!
  protein: Float!
  fat: Float!
}

type Verify2faCode {
  success: Boolean!
  message: String!
}

enum VideoZoomRole {
  PARTICIPANT
  HOST
}

"""A user's water log from the tracking service"""
type WaterLog {
  date: Date!
  value: Float!
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

input WeeklyPeriodInput {
  weekday: Weekday!
  period: AvailabilityWeekdayPeriodInput!
}

type WeeklyRules implements Node {
  """The ID of the object."""
  id: ID!
  weekday: Weekday!
  period: AvailabilityWeekdayPeriod!
}

enum WeeklyWeightGoal {
  MAINTAIN
  GOAL_0_5
  GOAL_1_0
  GOAL_1_5
  GOAL_2_0
}

"""An user's weight log from the tracking service"""
type WeightLog {
  date: Date!
  value: Float!
}

"""Aggregation and list of entries for a member weight logs"""
type WeightLogs {
  start: Float
  today: Float
  tendency: WeightLogsTendency
  logs: [WeightLog!]!
}

type WeightLogsTendency {
  difference: Float!
  type: WeightLogsTendencyType!
}

enum WeightLogsTendencyType {
  DOWN
  UP
}

